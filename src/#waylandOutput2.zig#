pub const Protocol = struct {
    name: []const u8,
    interfaces: []const Interface,
};

pub const Interface = struct {
    name: []const u8,
    events: []const Event,
    requests: []const Request,
};

pub const Event = struct {
    name: []const u8,
    args: []const Arg,
};

pub const Request = struct {
    name: []const u8,
    args: []const Arg,
};

pub const Arg = struct {
    name: []const u8,
    argType: ArgType,
};

pub fn getServerFile(alloc: std.mem.Allocator) !std.ArrayList(u8) {
    var alist = std.ArrayList(u8).init(alloc);
    var writer = alist.writer();
    errdefer alist.deinit();
    if (std.os.getenv("XDG_RUNTIME_DIR")) |dir| {
        if (std.os.getenv("WAYLAND_DISPLAY")) |data| {
            try std.fmt.format(writer, "{s}/{s}", .{ dir, data });
        } else {
            try std.fmt.format(writer, "{s}/{s}", .{ dir, "wayland-0" });
        }
    } else {
        return error.RuntimeNotSet;
    }
    return alist;
}

pub const WLConnection = struct {
    stream: std.net.Stream,
    readBuffer: std.ArrayList(u8),
    writeBuffer: std.ArrayList(u8),
    registry: Registry,
    argsBuffer: std.ArrayList(Value),
    pub fn init(alloc: std.mem.Allocator) !WLConnection {
        const serverFile = try getServerFile(alloc);
        defer serverFile.deinit();

        var connection = try std.net.connectUnixSocket(serverFile.items);
        errdefer connection.close();
        var wc = WLConnection{
            .stream = connection,
            .readBuffer = std.ArrayList(u8).init(alloc),
            .writeBuffer = std.ArrayList(u8).init(alloc),
            .registry = try Registry.init(alloc),
            .argsBuffer = std.ArrayList(Value).init(alloc),
        };
    }
    pub fn deinit(self: WLConnection) void {
        self.stream.close();
        self.readBufer.deinit();
        self.writerBuffer.deinit();
        self.registry.deinit();
    }
};

pub const WLCallback = struct {
    name: []const u8,
    args: []const Arg,
    ctx: ?*anyopaque,
    func: ?WaylandCallBackFn = null,
};

pub const ArgType = enum { Int, Uint, Fixed, String, Object, NewId, Array, Fd };

pub const String = []const u8;
pub const Uint = u32;
pub const Int = u32;
pub const Fixed = u32;
pub const Object = u32;
pub const NewId = u32;
pub const Fd = u32;
pub const Array = u32;

pub const Registry = struct {
    pub fn init(
        alloc: std.mem.Allocator,
        errorFn: ?WLCallback,
        delete_idFn: ?WLCallback,
    ) !Registry {
        var items = std.ArrayList(WLObject);
        errdefer items.deinit();
        return .{};
    }
    pub fn deinit(self: Registry) void {
        self.items.deinit();
    }
    items: std.ArrayList(WLObject),
    nextId: u32,
};

pub const WLObjectpu const wl_display = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    errorFn: ?WLCallbackFn = null,
    delete_idFn: ?WLCallbackFn = null,
    const error_name = "error";
    const error_arg = &[_]Arg{
        .{ .name = "object_id", .argType = .Object },
        .{ .name = "code", .argType = .Uint },
        .{ .name = "message", .argType = .String },
    };
    const delete_id_name = "delete_id";
    const delete_id_arg = &[_]Arg{
        .{ .name = "id", .argType = .Uint },
    };
    pub fn get_callback(self: wl_display, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{
                .name = error_name,
                .args = error_arg,
                .ctx = self.ctx,
                .func = self.errorFn,
            },
            1 => .{
                .name = delete_id_name,
                .args = delete_id_arg,
                .ctx = self.ctx,
                .func = self.delete_idFn,
            },
            else => null,
        };
    }
    pub fn syncFn(
        self: *wl_display,
        done: ?WLCallbackFn,
    ) *wl_callback {
        _ = self;
        _ = done;
        try self.conn.sendMessage(&.{});
    }
    pub fn get_registryFn(
        self: *wl_display,
        global: ?WLCallbackFn,
        global_remove: ?WLCallbackFn,
    ) *wl_registry {
        _ = self;
        _ = global;
        _ = global_remove;
        try self.conn.sendMessage(&.{});
    }
};

pub const wl_registry = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    globalFn: ?WLCallbackFn = null,
    global_removeFn: ?WLCallbackFn = null,
    const global_name = "global";
    const global_arg = &[_]Arg{
        .{ .name = "name", .argType = .Uint },
        .{ .name = "interface", .argType = .String },
        .{ .name = "version", .argType = .Uint },
    };
    const global_remove_name = "global_remove";
    const global_remove_arg = &[_]Arg{
        .{ .name = "name", .argType = .Uint },
    };
    pub fn get_callback(self: wl_registry, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = global_name, .args = global_arg, .ctx = self.ctx, .func = self.globalFn },
            1 => .{ .name = global_remove_name, .args = global_remove_arg, .ctx = self.ctx, .func = self.global_removeFn },
            else => null,
        };
    }
    pub fn bindFn(
        self: *wl_registry,
        name: Uint,
        interface: WLInterface,
    ) void {
        _ = self;
        _ = name;
        _ = interface;
        try self.conn.sendMessage(&.{
            .{ .Uint = name },
            .{ .String = interface.string },
            .{ .Uint = interface.version },
            .{ .NewId = interface.Id },
        });
    }
};

pub const wl_callback = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    doneFn: ?WLCallbackFn = null,
    const done_name = "done";
    const done_arg = &[_]Arg{
        .{ .name = "callback_data", .argType = .Uint },
    };
    pub fn get_callback(self: wl_callback, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = done_name, .args = done_arg, .ctx = self.ctx, .func = self.doneFn },
            else => null,
        };
    }
};

pub const wl_compositor = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    pub fn get_callback(self: wl_compositor, idx: u16) ?WLCallback {
        return switch (idx) {
            else => null,
        };
    }
    pub fn create_surfaceFn(
        self: *wl_compositor,
        enter: ?WLCallbackFn,
        leave: ?WLCallbackFn,
    ) *wl_surface {
        _ = self;
        _ = enter;
        _ = leave;
        try self.conn.sendMessage(&.{});
    }
    pub fn create_regionFn(
        self: *wl_compositor,
    ) *wl_region {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
};

pub const wl_shm_pool = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    pub fn get_callback(self: wl_shm_pool, idx: u16) ?WLCallback {
        return switch (idx) {
            else => null,
        };
    }
    pub fn create_bufferFn(
        self: *wl_shm_pool,
        release: ?WLCallbackFn,
        offset: Int,
        width: Int,
        height: Int,
        stride: Int,
        format: Uint,
    ) *wl_buffer {
        _ = self;
        _ = release;
        _ = offset;
        _ = width;
        _ = height;
        _ = stride;
        _ = format;
        try self.conn.sendMessage(&.{
            .{ .Int = offset },
            .{ .Int = width },
            .{ .Int = height },
            .{ .Int = stride },
            .{ .Uint = format },
        });
    }
    pub fn destroyFn(
        self: *wl_shm_pool,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn resizeFn(
        self: *wl_shm_pool,
        size: Int,
    ) void {
        _ = self;
        _ = size;
        try self.conn.sendMessage(&.{
            .{ .Int = size },
        });
    }
};

pub const wl_shm = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    formatFn: ?WLCallbackFn = null,
    const format_name = "format";
    const format_arg = &[_]Arg{
        .{ .name = "format", .argType = .Uint },
    };
    pub fn get_callback(self: wl_shm, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = format_name, .args = format_arg, .ctx = self.ctx, .func = self.formatFn },
            else => null,
        };
    }
    pub fn create_poolFn(
        self: *wl_shm,
        fd: Fd,
        size: Int,
    ) *wl_shm_pool {
        _ = self;
        _ = fd;
        _ = size;
        try self.conn.sendMessage(&.{
            .{ .Fd = fd },
            .{ .Int = size },
        });
    }
};

pub const wl_buffer = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    releaseFn: ?WLCallbackFn = null,
    const release_name = "release";
    const release_arg = &[_]Arg{};
    pub fn get_callback(self: wl_buffer, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = release_name, .args = release_arg, .ctx = self.ctx, .func = self.releaseFn },
            else => null,
        };
    }
    pub fn destroyFn(
        self: *wl_buffer,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
};

pub const wl_data_offer = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    offerFn: ?WLCallbackFn = null,
    source_actionsFn: ?WLCallbackFn = null,
    actionFn: ?WLCallbackFn = null,
    const offer_name = "offer";
    const offer_arg = &[_]Arg{
        .{ .name = "mime_type", .argType = .String },
    };
    const source_actions_name = "source_actions";
    const source_actions_arg = &[_]Arg{
        .{ .name = "source_actions", .argType = .Uint },
    };
    const action_name = "action";
    const action_arg = &[_]Arg{
        .{ .name = "dnd_action", .argType = .Uint },
    };
    pub fn get_callback(self: wl_data_offer, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = offer_name, .args = offer_arg, .ctx = self.ctx, .func = self.offerFn },
            1 => .{ .name = source_actions_name, .args = source_actions_arg, .ctx = self.ctx, .func = self.source_actionsFn },
            2 => .{ .name = action_name, .args = action_arg, .ctx = self.ctx, .func = self.actionFn },
            else => null,
        };
    }
    pub fn acceptFn(
        self: *wl_data_offer,
        serial: Uint,
        mime_type: String,
    ) void {
        _ = self;
        _ = serial;
        _ = mime_type;
        try self.conn.sendMessage(&.{
            .{ .Uint = serial },
            .{ .String = mime_type },
        });
    }
    pub fn receiveFn(
        self: *wl_data_offer,
        mime_type: String,
        fd: Fd,
    ) void {
        _ = self;
        _ = mime_type;
        _ = fd;
        try self.conn.sendMessage(&.{
            .{ .String = mime_type },
            .{ .Fd = fd },
        });
    }
    pub fn destroyFn(
        self: *wl_data_offer,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn finishFn(
        self: *wl_data_offer,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn set_actionsFn(
        self: *wl_data_offer,
        dnd_actions: Uint,
        preferred_action: Uint,
    ) void {
        _ = self;
        _ = dnd_actions;
        _ = preferred_action;
        try self.conn.sendMessage(&.{
            .{ .Uint = dnd_actions },
            .{ .Uint = preferred_action },
        });
    }
};

pub const wl_data_source = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    targetFn: ?WLCallbackFn = null,
    sendFn: ?WLCallbackFn = null,
    cancelledFn: ?WLCallbackFn = null,
    dnd_drop_performedFn: ?WLCallbackFn = null,
    dnd_finishedFn: ?WLCallbackFn = null,
    actionFn: ?WLCallbackFn = null,
    const target_name = "target";
    const target_arg = &[_]Arg{
        .{ .name = "mime_type", .argType = .String },
    };
    const send_name = "send";
    const send_arg = &[_]Arg{
        .{ .name = "mime_type", .argType = .String },
        .{ .name = "fd", .argType = .Fd },
    };
    const cancelled_name = "cancelled";
    const cancelled_arg = &[_]Arg{};
    const dnd_drop_performed_name = "dnd_drop_performed";
    const dnd_drop_performed_arg = &[_]Arg{};
    const dnd_finished_name = "dnd_finished";
    const dnd_finished_arg = &[_]Arg{};
    const action_name = "action";
    const action_arg = &[_]Arg{
        .{ .name = "dnd_action", .argType = .Uint },
    };
    pub fn get_callback(self: wl_data_source, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = target_name, .args = target_arg, .ctx = self.ctx, .func = self.targetFn },
            1 => .{ .name = send_name, .args = send_arg, .ctx = self.ctx, .func = self.sendFn },
            2 => .{ .name = cancelled_name, .args = cancelled_arg, .ctx = self.ctx, .func = self.cancelledFn },
            3 => .{ .name = dnd_drop_performed_name, .args = dnd_drop_performed_arg, .ctx = self.ctx, .func = self.dnd_drop_performedFn },
            4 => .{ .name = dnd_finished_name, .args = dnd_finished_arg, .ctx = self.ctx, .func = self.dnd_finishedFn },
            5 => .{ .name = action_name, .args = action_arg, .ctx = self.ctx, .func = self.actionFn },
            else => null,
        };
    }
    pub fn offerFn(
        self: *wl_data_source,
        mime_type: String,
    ) void {
        _ = self;
        _ = mime_type;
        try self.conn.sendMessage(&.{
            .{ .String = mime_type },
        });
    }
    pub fn destroyFn(
        self: *wl_data_source,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn set_actionsFn(
        self: *wl_data_source,
        dnd_actions: Uint,
    ) void {
        _ = self;
        _ = dnd_actions;
        try self.conn.sendMessage(&.{
            .{ .Uint = dnd_actions },
        });
    }
};

pub const wl_data_device = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    data_offerFn: ?WLCallbackFn = null,
    enterFn: ?WLCallbackFn = null,
    leaveFn: ?WLCallbackFn = null,
    motionFn: ?WLCallbackFn = null,
    dropFn: ?WLCallbackFn = null,
    selectionFn: ?WLCallbackFn = null,
    const data_offer_name = "data_offer";
    const data_offer_arg = &[_]Arg{
        .{ .name = "id", .argType = .NewId },
    };
    const enter_name = "enter";
    const enter_arg = &[_]Arg{
        .{ .name = "serial", .argType = .Uint },
        .{ .name = "surface", .argType = .Object },
        .{ .name = "x", .argType = .Fixed },
        .{ .name = "y", .argType = .Fixed },
        .{ .name = "id", .argType = .Object },
    };
    const leave_name = "leave";
    const leave_arg = &[_]Arg{};
    const motion_name = "motion";
    const motion_arg = &[_]Arg{
        .{ .name = "time", .argType = .Uint },
        .{ .name = "x", .argType = .Fixed },
        .{ .name = "y", .argType = .Fixed },
    };
    const drop_name = "drop";
    const drop_arg = &[_]Arg{};
    const selection_name = "selection";
    const selection_arg = &[_]Arg{
        .{ .name = "id", .argType = .Object },
    };
    pub fn get_callback(self: wl_data_device, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = data_offer_name, .args = data_offer_arg, .ctx = self.ctx, .func = self.data_offerFn },
            1 => .{ .name = enter_name, .args = enter_arg, .ctx = self.ctx, .func = self.enterFn },
            2 => .{ .name = leave_name, .args = leave_arg, .ctx = self.ctx, .func = self.leaveFn },
            3 => .{ .name = motion_name, .args = motion_arg, .ctx = self.ctx, .func = self.motionFn },
            4 => .{ .name = drop_name, .args = drop_arg, .ctx = self.ctx, .func = self.dropFn },
            5 => .{ .name = selection_name, .args = selection_arg, .ctx = self.ctx, .func = self.selectionFn },
            else => null,
        };
    }
    pub fn start_dragFn(
        self: *wl_data_device,
        source: Object,
        origin: Object,
        icon: Object,
        serial: Uint,
    ) void {
        _ = self;
        _ = source;
        _ = origin;
        _ = icon;
        _ = serial;
        try self.conn.sendMessage(&.{
            .{ .Object = source },
            .{ .Object = origin },
            .{ .Object = icon },
            .{ .Uint = serial },
        });
    }
    pub fn set_selectionFn(
        self: *wl_data_device,
        source: Object,
        serial: Uint,
    ) void {
        _ = self;
        _ = source;
        _ = serial;
        try self.conn.sendMessage(&.{
            .{ .Object = source },
            .{ .Uint = serial },
        });
    }
    pub fn releaseFn(
        self: *wl_data_device,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
};

pub const wl_data_device_manager = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    pub fn get_callback(self: wl_data_device_manager, idx: u16) ?WLCallback {
        return switch (idx) {
            else => null,
        };
    }
    pub fn create_data_sourceFn(
        self: *wl_data_device_manager,
        target: ?WLCallbackFn,
        send: ?WLCallbackFn,
        cancelled: ?WLCallbackFn,
        dnd_drop_performed: ?WLCallbackFn,
        dnd_finished: ?WLCallbackFn,
        action: ?WLCallbackFn,
    ) *wl_data_source {
        _ = self;
        _ = target;
        _ = send;
        _ = cancelled;
        _ = dnd_drop_performed;
        _ = dnd_finished;
        _ = action;
        try self.conn.sendMessage(&.{});
    }
    pub fn get_data_deviceFn(
        self: *wl_data_device_manager,
        data_offer: ?WLCallbackFn,
        enter: ?WLCallbackFn,
        leave: ?WLCallbackFn,
        motion: ?WLCallbackFn,
        drop: ?WLCallbackFn,
        selection: ?WLCallbackFn,
        seat: Object,
    ) *wl_data_device {
        _ = self;
        _ = data_offer;
        _ = enter;
        _ = leave;
        _ = motion;
        _ = drop;
        _ = selection;
        _ = seat;
        try self.conn.sendMessage(&.{
            .{ .Object = seat },
        });
    }
};

pub const wl_shell = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    pub fn get_callback(self: wl_shell, idx: u16) ?WLCallback {
        return switch (idx) {
            else => null,
        };
    }
    pub fn get_shell_surfaceFn(
        self: *wl_shell,
        ping: ?WLCallbackFn,
        configure: ?WLCallbackFn,
        popup_done: ?WLCallbackFn,
        surface: Object,
    ) *wl_shell_surface {
        _ = self;
        _ = ping;
        _ = configure;
        _ = popup_done;
        _ = surface;
        try self.conn.sendMessage(&.{
            .{ .Object = surface },
        });
    }
};

pub const wl_shell_surface = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    pingFn: ?WLCallbackFn = null,
    configureFn: ?WLCallbackFn = null,
    popup_doneFn: ?WLCallbackFn = null,
    const ping_name = "ping";
    const ping_arg = &[_]Arg{
        .{ .name = "serial", .argType = .Uint },
    };
    const configure_name = "configure";
    const configure_arg = &[_]Arg{
        .{ .name = "edges", .argType = .Uint },
        .{ .name = "width", .argType = .Int },
        .{ .name = "height", .argType = .Int },
    };
    const popup_done_name = "popup_done";
    const popup_done_arg = &[_]Arg{};
    pub fn get_callback(self: wl_shell_surface, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = ping_name, .args = ping_arg, .ctx = self.ctx, .func = self.pingFn },
            1 => .{ .name = configure_name, .args = configure_arg, .ctx = self.ctx, .func = self.configureFn },
            2 => .{ .name = popup_done_name, .args = popup_done_arg, .ctx = self.ctx, .func = self.popup_doneFn },
            else => null,
        };
    }
    pub fn pongFn(
        self: *wl_shell_surface,
        serial: Uint,
    ) void {
        _ = self;
        _ = serial;
        try self.conn.sendMessage(&.{
            .{ .Uint = serial },
        });
    }
    pub fn moveFn(
        self: *wl_shell_surface,
        seat: Object,
        serial: Uint,
    ) void {
        _ = self;
        _ = seat;
        _ = serial;
        try self.conn.sendMessage(&.{
            .{ .Object = seat },
            .{ .Uint = serial },
        });
    }
    pub fn resizeFn(
        self: *wl_shell_surface,
        seat: Object,
        serial: Uint,
        edges: Uint,
    ) void {
        _ = self;
        _ = seat;
        _ = serial;
        _ = edges;
        try self.conn.sendMessage(&.{
            .{ .Object = seat },
            .{ .Uint = serial },
            .{ .Uint = edges },
        });
    }
    pub fn set_toplevelFn(
        self: *wl_shell_surface,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn set_transientFn(
        self: *wl_shell_surface,
        parent: Object,
        x: Int,
        y: Int,
        flags: Uint,
    ) void {
        _ = self;
        _ = parent;
        _ = x;
        _ = y;
        _ = flags;
        try self.conn.sendMessage(&.{
            .{ .Object = parent },
            .{ .Int = x },
            .{ .Int = y },
            .{ .Uint = flags },
        });
    }
    pub fn set_fullscreenFn(
        self: *wl_shell_surface,
        method: Uint,
        framerate: Uint,
        output: Object,
    ) void {
        _ = self;
        _ = method;
        _ = framerate;
        _ = output;
        try self.conn.sendMessage(&.{
            .{ .Uint = method },
            .{ .Uint = framerate },
            .{ .Object = output },
        });
    }
    pub fn set_popupFn(
        self: *wl_shell_surface,
        seat: Object,
        serial: Uint,
        parent: Object,
        x: Int,
        y: Int,
        flags: Uint,
    ) void {
        _ = self;
        _ = seat;
        _ = serial;
        _ = parent;
        _ = x;
        _ = y;
        _ = flags;
        try self.conn.sendMessage(&.{
            .{ .Object = seat },
            .{ .Uint = serial },
            .{ .Object = parent },
            .{ .Int = x },
            .{ .Int = y },
            .{ .Uint = flags },
        });
    }
    pub fn set_maximizedFn(
        self: *wl_shell_surface,
        output: Object,
    ) void {
        _ = self;
        _ = output;
        try self.conn.sendMessage(&.{
            .{ .Object = output },
        });
    }
    pub fn set_titleFn(
        self: *wl_shell_surface,
        title: String,
    ) void {
        _ = self;
        _ = title;
        try self.conn.sendMessage(&.{
            .{ .String = title },
        });
    }
    pub fn set_classFn(
        self: *wl_shell_surface,
        class_: String,
    ) void {
        _ = self;
        _ = class_;
        try self.conn.sendMessage(&.{
            .{ .String = class_ },
        });
    }
};

pub const wl_surface = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    enterFn: ?WLCallbackFn = null,
    leaveFn: ?WLCallbackFn = null,
    const enter_name = "enter";
    const enter_arg = &[_]Arg{
        .{ .name = "output", .argType = .Object },
    };
    const leave_name = "leave";
    const leave_arg = &[_]Arg{
        .{ .name = "output", .argType = .Object },
    };
    pub fn get_callback(self: wl_surface, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = enter_name, .args = enter_arg, .ctx = self.ctx, .func = self.enterFn },
            1 => .{ .name = leave_name, .args = leave_arg, .ctx = self.ctx, .func = self.leaveFn },
            else => null,
        };
    }
    pub fn destroyFn(
        self: *wl_surface,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn attachFn(
        self: *wl_surface,
        buffer: Object,
        x: Int,
        y: Int,
    ) void {
        _ = self;
        _ = buffer;
        _ = x;
        _ = y;
        try self.conn.sendMessage(&.{
            .{ .Object = buffer },
            .{ .Int = x },
            .{ .Int = y },
        });
    }
    pub fn damageFn(
        self: *wl_surface,
        x: Int,
        y: Int,
        width: Int,
        height: Int,
    ) void {
        _ = self;
        _ = x;
        _ = y;
        _ = width;
        _ = height;
        try self.conn.sendMessage(&.{
            .{ .Int = x },
            .{ .Int = y },
            .{ .Int = width },
            .{ .Int = height },
        });
    }
    pub fn frameFn(
        self: *wl_surface,
        done: ?WLCallbackFn,
    ) *wl_callback {
        _ = self;
        _ = done;
        try self.conn.sendMessage(&.{});
    }
    pub fn set_opaque_regionFn(
        self: *wl_surface,
        region: Object,
    ) void {
        _ = self;
        _ = region;
        try self.conn.sendMessage(&.{
            .{ .Object = region },
        });
    }
    pub fn set_input_regionFn(
        self: *wl_surface,
        region: Object,
    ) void {
        _ = self;
        _ = region;
        try self.conn.sendMessage(&.{
            .{ .Object = region },
        });
    }
    pub fn commitFn(
        self: *wl_surface,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn set_buffer_transformFn(
        self: *wl_surface,
        transform: Int,
    ) void {
        _ = self;
        _ = transform;
        try self.conn.sendMessage(&.{
            .{ .Int = transform },
        });
    }
    pub fn set_buffer_scaleFn(
        self: *wl_surface,
        scale: Int,
    ) void {
        _ = self;
        _ = scale;
        try self.conn.sendMessage(&.{
            .{ .Int = scale },
        });
    }
    pub fn damage_bufferFn(
        self: *wl_surface,
        x: Int,
        y: Int,
        width: Int,
        height: Int,
    ) void {
        _ = self;
        _ = x;
        _ = y;
        _ = width;
        _ = height;
        try self.conn.sendMessage(&.{
            .{ .Int = x },
            .{ .Int = y },
            .{ .Int = width },
            .{ .Int = height },
        });
    }
    pub fn offsetFn(
        self: *wl_surface,
        x: Int,
        y: Int,
    ) void {
        _ = self;
        _ = x;
        _ = y;
        try self.conn.sendMessage(&.{
            .{ .Int = x },
            .{ .Int = y },
        });
    }
};

pub const wl_seat = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    capabilitiesFn: ?WLCallbackFn = null,
    nameFn: ?WLCallbackFn = null,
    const capabilities_name = "capabilities";
    const capabilities_arg = &[_]Arg{
        .{ .name = "capabilities", .argType = .Uint },
    };
    const name_name = "name";
    const name_arg = &[_]Arg{
        .{ .name = "name", .argType = .String },
    };
    pub fn get_callback(self: wl_seat, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = capabilities_name, .args = capabilities_arg, .ctx = self.ctx, .func = self.capabilitiesFn },
            1 => .{ .name = name_name, .args = name_arg, .ctx = self.ctx, .func = self.nameFn },
            else => null,
        };
    }
    pub fn get_pointerFn(
        self: *wl_seat,
        enter: ?WLCallbackFn,
        leave: ?WLCallbackFn,
        motion: ?WLCallbackFn,
        button: ?WLCallbackFn,
        axis: ?WLCallbackFn,
        frame: ?WLCallbackFn,
        axis_source: ?WLCallbackFn,
        axis_stop: ?WLCallbackFn,
        axis_discrete: ?WLCallbackFn,
    ) *wl_pointer {
        _ = self;
        _ = enter;
        _ = leave;
        _ = motion;
        _ = button;
        _ = axis;
        _ = frame;
        _ = axis_source;
        _ = axis_stop;
        _ = axis_discrete;
        try self.conn.sendMessage(&.{});
    }
    pub fn get_keyboardFn(
        self: *wl_seat,
        keymap: ?WLCallbackFn,
        enter: ?WLCallbackFn,
        leave: ?WLCallbackFn,
        key: ?WLCallbackFn,
        modifiers: ?WLCallbackFn,
        repeat_info: ?WLCallbackFn,
    ) *wl_keyboard {
        _ = self;
        _ = keymap;
        _ = enter;
        _ = leave;
        _ = key;
        _ = modifiers;
        _ = repeat_info;
        try self.conn.sendMessage(&.{});
    }
    pub fn get_touchFn(
        self: *wl_seat,
        down: ?WLCallbackFn,
        up: ?WLCallbackFn,
        motion: ?WLCallbackFn,
        frame: ?WLCallbackFn,
        cancel: ?WLCallbackFn,
        shape: ?WLCallbackFn,
        orientation: ?WLCallbackFn,
    ) *wl_touch {
        _ = self;
        _ = down;
        _ = up;
        _ = motion;
        _ = frame;
        _ = cancel;
        _ = shape;
        _ = orientation;
        try self.conn.sendMessage(&.{});
    }
    pub fn releaseFn(
        self: *wl_seat,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
};

pub const wl_pointer = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    enterFn: ?WLCallbackFn = null,
    leaveFn: ?WLCallbackFn = null,
    motionFn: ?WLCallbackFn = null,
    buttonFn: ?WLCallbackFn = null,
    axisFn: ?WLCallbackFn = null,
    frameFn: ?WLCallbackFn = null,
    axis_sourceFn: ?WLCallbackFn = null,
    axis_stopFn: ?WLCallbackFn = null,
    axis_discreteFn: ?WLCallbackFn = null,
    const enter_name = "enter";
    const enter_arg = &[_]Arg{
        .{ .name = "serial", .argType = .Uint },
        .{ .name = "surface", .argType = .Object },
        .{ .name = "surface_x", .argType = .Fixed },
        .{ .name = "surface_y", .argType = .Fixed },
    };
    const leave_name = "leave";
    const leave_arg = &[_]Arg{
        .{ .name = "serial", .argType = .Uint },
        .{ .name = "surface", .argType = .Object },
    };
    const motion_name = "motion";
    const motion_arg = &[_]Arg{
        .{ .name = "time", .argType = .Uint },
        .{ .name = "surface_x", .argType = .Fixed },
        .{ .name = "surface_y", .argType = .Fixed },
    };
    const button_name = "button";
    const button_arg = &[_]Arg{
        .{ .name = "serial", .argType = .Uint },
        .{ .name = "time", .argType = .Uint },
        .{ .name = "button", .argType = .Uint },
        .{ .name = "state", .argType = .Uint },
    };
    const axis_name = "axis";
    const axis_arg = &[_]Arg{
        .{ .name = "time", .argType = .Uint },
        .{ .name = "axis", .argType = .Uint },
        .{ .name = "value", .argType = .Fixed },
    };
    const frame_name = "frame";
    const frame_arg = &[_]Arg{};
    const axis_source_name = "axis_source";
    const axis_source_arg = &[_]Arg{
        .{ .name = "axis_source", .argType = .Uint },
    };
    const axis_stop_name = "axis_stop";
    const axis_stop_arg = &[_]Arg{
        .{ .name = "time", .argType = .Uint },
        .{ .name = "axis", .argType = .Uint },
    };
    const axis_discrete_name = "axis_discrete";
    const axis_discrete_arg = &[_]Arg{
        .{ .name = "axis", .argType = .Uint },
        .{ .name = "discrete", .argType = .Int },
    };
    pub fn get_callback(self: wl_pointer, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = enter_name, .args = enter_arg, .ctx = self.ctx, .func = self.enterFn },
            1 => .{ .name = leave_name, .args = leave_arg, .ctx = self.ctx, .func = self.leaveFn },
            2 => .{ .name = motion_name, .args = motion_arg, .ctx = self.ctx, .func = self.motionFn },
            3 => .{ .name = button_name, .args = button_arg, .ctx = self.ctx, .func = self.buttonFn },
            4 => .{ .name = axis_name, .args = axis_arg, .ctx = self.ctx, .func = self.axisFn },
            5 => .{ .name = frame_name, .args = frame_arg, .ctx = self.ctx, .func = self.frameFn },
            6 => .{ .name = axis_source_name, .args = axis_source_arg, .ctx = self.ctx, .func = self.axis_sourceFn },
            7 => .{ .name = axis_stop_name, .args = axis_stop_arg, .ctx = self.ctx, .func = self.axis_stopFn },
            8 => .{ .name = axis_discrete_name, .args = axis_discrete_arg, .ctx = self.ctx, .func = self.axis_discreteFn },
            else => null,
        };
    }
    pub fn set_cursorFn(
        self: *wl_pointer,
        serial: Uint,
        surface: Object,
        hotspot_x: Int,
        hotspot_y: Int,
    ) void {
        _ = self;
        _ = serial;
        _ = surface;
        _ = hotspot_x;
        _ = hotspot_y;
        try self.conn.sendMessage(&.{
            .{ .Uint = serial },
            .{ .Object = surface },
            .{ .Int = hotspot_x },
            .{ .Int = hotspot_y },
        });
    }
    pub fn releaseFn(
        self: *wl_pointer,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
};

pub const wl_keyboard = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    keymapFn: ?WLCallbackFn = null,
    enterFn: ?WLCallbackFn = null,
    leaveFn: ?WLCallbackFn = null,
    keyFn: ?WLCallbackFn = null,
    modifiersFn: ?WLCallbackFn = null,
    repeat_infoFn: ?WLCallbackFn = null,
    const keymap_name = "keymap";
    const keymap_arg = &[_]Arg{
        .{ .name = "format", .argType = .Uint },
        .{ .name = "fd", .argType = .Fd },
        .{ .name = "size", .argType = .Uint },
    };
    const enter_name = "enter";
    const enter_arg = &[_]Arg{
        .{ .name = "serial", .argType = .Uint },
        .{ .name = "surface", .argType = .Object },
        .{ .name = "keys", .argType = .Array },
    };
    const leave_name = "leave";
    const leave_arg = &[_]Arg{
        .{ .name = "serial", .argType = .Uint },
        .{ .name = "surface", .argType = .Object },
    };
    const key_name = "key";
    const key_arg = &[_]Arg{
        .{ .name = "serial", .argType = .Uint },
        .{ .name = "time", .argType = .Uint },
        .{ .name = "key", .argType = .Uint },
        .{ .name = "state", .argType = .Uint },
    };
    const modifiers_name = "modifiers";
    const modifiers_arg = &[_]Arg{
        .{ .name = "serial", .argType = .Uint },
        .{ .name = "mods_depressed", .argType = .Uint },
        .{ .name = "mods_latched", .argType = .Uint },
        .{ .name = "mods_locked", .argType = .Uint },
        .{ .name = "group", .argType = .Uint },
    };
    const repeat_info_name = "repeat_info";
    const repeat_info_arg = &[_]Arg{
        .{ .name = "rate", .argType = .Int },
        .{ .name = "delay", .argType = .Int },
    };
    pub fn get_callback(self: wl_keyboard, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = keymap_name, .args = keymap_arg, .ctx = self.ctx, .func = self.keymapFn },
            1 => .{ .name = enter_name, .args = enter_arg, .ctx = self.ctx, .func = self.enterFn },
            2 => .{ .name = leave_name, .args = leave_arg, .ctx = self.ctx, .func = self.leaveFn },
            3 => .{ .name = key_name, .args = key_arg, .ctx = self.ctx, .func = self.keyFn },
            4 => .{ .name = modifiers_name, .args = modifiers_arg, .ctx = self.ctx, .func = self.modifiersFn },
            5 => .{ .name = repeat_info_name, .args = repeat_info_arg, .ctx = self.ctx, .func = self.repeat_infoFn },
            else => null,
        };
    }
    pub fn releaseFn(
        self: *wl_keyboard,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
};

pub const wl_touch = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    downFn: ?WLCallbackFn = null,
    upFn: ?WLCallbackFn = null,
    motionFn: ?WLCallbackFn = null,
    frameFn: ?WLCallbackFn = null,
    cancelFn: ?WLCallbackFn = null,
    shapeFn: ?WLCallbackFn = null,
    orientationFn: ?WLCallbackFn = null,
    const down_name = "down";
    const down_arg = &[_]Arg{
        .{ .name = "serial", .argType = .Uint },
        .{ .name = "time", .argType = .Uint },
        .{ .name = "surface", .argType = .Object },
        .{ .name = "id", .argType = .Int },
        .{ .name = "x", .argType = .Fixed },
        .{ .name = "y", .argType = .Fixed },
    };
    const up_name = "up";
    const up_arg = &[_]Arg{
        .{ .name = "serial", .argType = .Uint },
        .{ .name = "time", .argType = .Uint },
        .{ .name = "id", .argType = .Int },
    };
    const motion_name = "motion";
    const motion_arg = &[_]Arg{
        .{ .name = "time", .argType = .Uint },
        .{ .name = "id", .argType = .Int },
        .{ .name = "x", .argType = .Fixed },
        .{ .name = "y", .argType = .Fixed },
    };
    const frame_name = "frame";
    const frame_arg = &[_]Arg{};
    const cancel_name = "cancel";
    const cancel_arg = &[_]Arg{};
    const shape_name = "shape";
    const shape_arg = &[_]Arg{
        .{ .name = "id", .argType = .Int },
        .{ .name = "major", .argType = .Fixed },
        .{ .name = "minor", .argType = .Fixed },
    };
    const orientation_name = "orientation";
    const orientation_arg = &[_]Arg{
        .{ .name = "id", .argType = .Int },
        .{ .name = "orientation", .argType = .Fixed },
    };
    pub fn get_callback(self: wl_touch, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = down_name, .args = down_arg, .ctx = self.ctx, .func = self.downFn },
            1 => .{ .name = up_name, .args = up_arg, .ctx = self.ctx, .func = self.upFn },
            2 => .{ .name = motion_name, .args = motion_arg, .ctx = self.ctx, .func = self.motionFn },
            3 => .{ .name = frame_name, .args = frame_arg, .ctx = self.ctx, .func = self.frameFn },
            4 => .{ .name = cancel_name, .args = cancel_arg, .ctx = self.ctx, .func = self.cancelFn },
            5 => .{ .name = shape_name, .args = shape_arg, .ctx = self.ctx, .func = self.shapeFn },
            6 => .{ .name = orientation_name, .args = orientation_arg, .ctx = self.ctx, .func = self.orientationFn },
            else => null,
        };
    }
    pub fn releaseFn(
        self: *wl_touch,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
};

pub const wl_output = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    geometryFn: ?WLCallbackFn = null,
    modeFn: ?WLCallbackFn = null,
    doneFn: ?WLCallbackFn = null,
    scaleFn: ?WLCallbackFn = null,
    nameFn: ?WLCallbackFn = null,
    descriptionFn: ?WLCallbackFn = null,
    const geometry_name = "geometry";
    const geometry_arg = &[_]Arg{
        .{ .name = "x", .argType = .Int },
        .{ .name = "y", .argType = .Int },
        .{ .name = "physical_width", .argType = .Int },
        .{ .name = "physical_height", .argType = .Int },
        .{ .name = "subpixel", .argType = .Int },
        .{ .name = "make", .argType = .String },
        .{ .name = "model", .argType = .String },
        .{ .name = "transform", .argType = .Int },
    };
    const mode_name = "mode";
    const mode_arg = &[_]Arg{
        .{ .name = "flags", .argType = .Uint },
        .{ .name = "width", .argType = .Int },
        .{ .name = "height", .argType = .Int },
        .{ .name = "refresh", .argType = .Int },
    };
    const done_name = "done";
    const done_arg = &[_]Arg{};
    const scale_name = "scale";
    const scale_arg = &[_]Arg{
        .{ .name = "factor", .argType = .Int },
    };
    const name_name = "name";
    const name_arg = &[_]Arg{
        .{ .name = "name", .argType = .String },
    };
    const description_name = "description";
    const description_arg = &[_]Arg{
        .{ .name = "description", .argType = .String },
    };
    pub fn get_callback(self: wl_output, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = geometry_name, .args = geometry_arg, .ctx = self.ctx, .func = self.geometryFn },
            1 => .{ .name = mode_name, .args = mode_arg, .ctx = self.ctx, .func = self.modeFn },
            2 => .{ .name = done_name, .args = done_arg, .ctx = self.ctx, .func = self.doneFn },
            3 => .{ .name = scale_name, .args = scale_arg, .ctx = self.ctx, .func = self.scaleFn },
            4 => .{ .name = name_name, .args = name_arg, .ctx = self.ctx, .func = self.nameFn },
            5 => .{ .name = description_name, .args = description_arg, .ctx = self.ctx, .func = self.descriptionFn },
            else => null,
        };
    }
    pub fn releaseFn(
        self: *wl_output,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
};

pub const wl_region = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    pub fn get_callback(self: wl_region, idx: u16) ?WLCallback {
        return switch (idx) {
            else => null,
        };
    }
    pub fn destroyFn(
        self: *wl_region,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn addFn(
        self: *wl_region,
        x: Int,
        y: Int,
        width: Int,
        height: Int,
    ) void {
        _ = self;
        _ = x;
        _ = y;
        _ = width;
        _ = height;
        try self.conn.sendMessage(&.{
            .{ .Int = x },
            .{ .Int = y },
            .{ .Int = width },
            .{ .Int = height },
        });
    }
    pub fn subtractFn(
        self: *wl_region,
        x: Int,
        y: Int,
        width: Int,
        height: Int,
    ) void {
        _ = self;
        _ = x;
        _ = y;
        _ = width;
        _ = height;
        try self.conn.sendMessage(&.{
            .{ .Int = x },
            .{ .Int = y },
            .{ .Int = width },
            .{ .Int = height },
        });
    }
};

pub const wl_subcompositor = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    pub fn get_callback(self: wl_subcompositor, idx: u16) ?WLCallback {
        return switch (idx) {
            else => null,
        };
    }
    pub fn destroyFn(
        self: *wl_subcompositor,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn get_subsurfaceFn(
        self: *wl_subcompositor,
        surface: Object,
        parent: Object,
    ) *wl_subsurface {
        _ = self;
        _ = surface;
        _ = parent;
        try self.conn.sendMessage(&.{
            .{ .Object = surface },
            .{ .Object = parent },
        });
    }
};

pub const wl_subsurface = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    pub fn get_callback(self: wl_subsurface, idx: u16) ?WLCallback {
        return switch (idx) {
            else => null,
        };
    }
    pub fn destroyFn(
        self: *wl_subsurface,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn set_positionFn(
        self: *wl_subsurface,
        x: Int,
        y: Int,
    ) void {
        _ = self;
        _ = x;
        _ = y;
        try self.conn.sendMessage(&.{
            .{ .Int = x },
            .{ .Int = y },
        });
    }
    pub fn place_aboveFn(
        self: *wl_subsurface,
        sibling: Object,
    ) void {
        _ = self;
        _ = sibling;
        try self.conn.sendMessage(&.{
            .{ .Object = sibling },
        });
    }
    pub fn place_belowFn(
        self: *wl_subsurface,
        sibling: Object,
    ) void {
        _ = self;
        _ = sibling;
        try self.conn.sendMessage(&.{
            .{ .Object = sibling },
        });
    }
    pub fn set_syncFn(
        self: *wl_subsurface,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn set_desyncFn(
        self: *wl_subsurface,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
};

pub const wp_presentation = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    clock_idFn: ?WLCallbackFn = null,
    const clock_id_name = "clock_id";
    const clock_id_arg = &[_]Arg{
        .{ .name = "clk_id", .argType = .Uint },
    };
    pub fn get_callback(self: wp_presentation, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = clock_id_name, .args = clock_id_arg, .ctx = self.ctx, .func = self.clock_idFn },
            else => null,
        };
    }
    pub fn destroyFn(
        self: *wp_presentation,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn feedbackFn(
        self: *wp_presentation,
        surface: Object,
        sync_output: ?WLCallbackFn,
        presented: ?WLCallbackFn,
        discarded: ?WLCallbackFn,
    ) *wp_presentation_feedback {
        _ = self;
        _ = surface;
        _ = sync_output;
        _ = presented;
        _ = discarded;
        try self.conn.sendMessage(&.{
            .{ .Object = surface },
        });
    }
};

pub const wp_presentation_feedback = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    sync_outputFn: ?WLCallbackFn = null,
    presentedFn: ?WLCallbackFn = null,
    discardedFn: ?WLCallbackFn = null,
    const sync_output_name = "sync_output";
    const sync_output_arg = &[_]Arg{
        .{ .name = "output", .argType = .Object },
    };
    const presented_name = "presented";
    const presented_arg = &[_]Arg{
        .{ .name = "tv_sec_hi", .argType = .Uint },
        .{ .name = "tv_sec_lo", .argType = .Uint },
        .{ .name = "tv_nsec", .argType = .Uint },
        .{ .name = "refresh", .argType = .Uint },
        .{ .name = "seq_hi", .argType = .Uint },
        .{ .name = "seq_lo", .argType = .Uint },
        .{ .name = "flags", .argType = .Uint },
    };
    const discarded_name = "discarded";
    const discarded_arg = &[_]Arg{};
    pub fn get_callback(self: wp_presentation_feedback, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = sync_output_name, .args = sync_output_arg, .ctx = self.ctx, .func = self.sync_outputFn },
            1 => .{ .name = presented_name, .args = presented_arg, .ctx = self.ctx, .func = self.presentedFn },
            2 => .{ .name = discarded_name, .args = discarded_arg, .ctx = self.ctx, .func = self.discardedFn },
            else => null,
        };
    }
};

pub const wp_viewporter = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    pub fn get_callback(self: wp_viewporter, idx: u16) ?WLCallback {
        return switch (idx) {
            else => null,
        };
    }
    pub fn destroyFn(
        self: *wp_viewporter,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn get_viewportFn(
        self: *wp_viewporter,
        surface: Object,
    ) *wp_viewport {
        _ = self;
        _ = surface;
        try self.conn.sendMessage(&.{
            .{ .Object = surface },
        });
    }
};

pub const wp_viewport = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    pub fn get_callback(self: wp_viewport, idx: u16) ?WLCallback {
        return switch (idx) {
            else => null,
        };
    }
    pub fn destroyFn(
        self: *wp_viewport,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn set_sourceFn(
        self: *wp_viewport,
        x: Fixed,
        y: Fixed,
        width: Fixed,
        height: Fixed,
    ) void {
        _ = self;
        _ = x;
        _ = y;
        _ = width;
        _ = height;
        try self.conn.sendMessage(&.{
            .{ .Fixed = x },
            .{ .Fixed = y },
            .{ .Fixed = width },
            .{ .Fixed = height },
        });
    }
    pub fn set_destinationFn(
        self: *wp_viewport,
        width: Int,
        height: Int,
    ) void {
        _ = self;
        _ = width;
        _ = height;
        try self.conn.sendMessage(&.{
            .{ .Int = width },
            .{ .Int = height },
        });
    }
};

pub const xdg_wm_base = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    pingFn: ?WLCallbackFn = null,
    const ping_name = "ping";
    const ping_arg = &[_]Arg{
        .{ .name = "serial", .argType = .Uint },
    };
    pub fn get_callback(self: xdg_wm_base, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = ping_name, .args = ping_arg, .ctx = self.ctx, .func = self.pingFn },
            else => null,
        };
    }
    pub fn destroyFn(
        self: *xdg_wm_base,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn create_positionerFn(
        self: *xdg_wm_base,
    ) *xdg_positioner {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn get_xdg_surfaceFn(
        self: *xdg_wm_base,
        configure: ?WLCallbackFn,
        surface: Object,
    ) *xdg_surface {
        _ = self;
        _ = configure;
        _ = surface;
        try self.conn.sendMessage(&.{
            .{ .Object = surface },
        });
    }
    pub fn pongFn(
        self: *xdg_wm_base,
        serial: Uint,
    ) void {
        _ = self;
        _ = serial;
        try self.conn.sendMessage(&.{
            .{ .Uint = serial },
        });
    }
};

pub const xdg_positioner = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    pub fn get_callback(self: xdg_positioner, idx: u16) ?WLCallback {
        return switch (idx) {
            else => null,
        };
    }
    pub fn destroyFn(
        self: *xdg_positioner,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn set_sizeFn(
        self: *xdg_positioner,
        width: Int,
        height: Int,
    ) void {
        _ = self;
        _ = width;
        _ = height;
        try self.conn.sendMessage(&.{
            .{ .Int = width },
            .{ .Int = height },
        });
    }
    pub fn set_anchor_rectFn(
        self: *xdg_positioner,
        x: Int,
        y: Int,
        width: Int,
        height: Int,
    ) void {
        _ = self;
        _ = x;
        _ = y;
        _ = width;
        _ = height;
        try self.conn.sendMessage(&.{
            .{ .Int = x },
            .{ .Int = y },
            .{ .Int = width },
            .{ .Int = height },
        });
    }
    pub fn set_anchorFn(
        self: *xdg_positioner,
        anchor: Uint,
    ) void {
        _ = self;
        _ = anchor;
        try self.conn.sendMessage(&.{
            .{ .Uint = anchor },
        });
    }
    pub fn set_gravityFn(
        self: *xdg_positioner,
        gravity: Uint,
    ) void {
        _ = self;
        _ = gravity;
        try self.conn.sendMessage(&.{
            .{ .Uint = gravity },
        });
    }
    pub fn set_constraint_adjustmentFn(
        self: *xdg_positioner,
        constraint_adjustment: Uint,
    ) void {
        _ = self;
        _ = constraint_adjustment;
        try self.conn.sendMessage(&.{
            .{ .Uint = constraint_adjustment },
        });
    }
    pub fn set_offsetFn(
        self: *xdg_positioner,
        x: Int,
        y: Int,
    ) void {
        _ = self;
        _ = x;
        _ = y;
        try self.conn.sendMessage(&.{
            .{ .Int = x },
            .{ .Int = y },
        });
    }
    pub fn set_reactiveFn(
        self: *xdg_positioner,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn set_parent_sizeFn(
        self: *xdg_positioner,
        parent_width: Int,
        parent_height: Int,
    ) void {
        _ = self;
        _ = parent_width;
        _ = parent_height;
        try self.conn.sendMessage(&.{
            .{ .Int = parent_width },
            .{ .Int = parent_height },
        });
    }
    pub fn set_parent_configureFn(
        self: *xdg_positioner,
        serial: Uint,
    ) void {
        _ = self;
        _ = serial;
        try self.conn.sendMessage(&.{
            .{ .Uint = serial },
        });
    }
};

pub const xdg_surface = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    configureFn: ?WLCallbackFn = null,
    const configure_name = "configure";
    const configure_arg = &[_]Arg{
        .{ .name = "serial", .argType = .Uint },
    };
    pub fn get_callback(self: xdg_surface, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = configure_name, .args = configure_arg, .ctx = self.ctx, .func = self.configureFn },
            else => null,
        };
    }
    pub fn destroyFn(
        self: *xdg_surface,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn get_toplevelFn(
        self: *xdg_surface,
        configure: ?WLCallbackFn,
        close: ?WLCallbackFn,
        configure_bounds: ?WLCallbackFn,
        wm_capabilities: ?WLCallbackFn,
    ) *xdg_toplevel {
        _ = self;
        _ = configure;
        _ = close;
        _ = configure_bounds;
        _ = wm_capabilities;
        try self.conn.sendMessage(&.{});
    }
    pub fn get_popupFn(
        self: *xdg_surface,
        configure: ?WLCallbackFn,
        popup_done: ?WLCallbackFn,
        repositioned: ?WLCallbackFn,
        parent: Object,
        positioner: Object,
    ) *xdg_popup {
        _ = self;
        _ = configure;
        _ = popup_done;
        _ = repositioned;
        _ = parent;
        _ = positioner;
        try self.conn.sendMessage(&.{
            .{ .Object = parent },
            .{ .Object = positioner },
        });
    }
    pub fn set_window_geometryFn(
        self: *xdg_surface,
        x: Int,
        y: Int,
        width: Int,
        height: Int,
    ) void {
        _ = self;
        _ = x;
        _ = y;
        _ = width;
        _ = height;
        try self.conn.sendMessage(&.{
            .{ .Int = x },
            .{ .Int = y },
            .{ .Int = width },
            .{ .Int = height },
        });
    }
    pub fn ack_configureFn(
        self: *xdg_surface,
        serial: Uint,
    ) void {
        _ = self;
        _ = serial;
        try self.conn.sendMessage(&.{
            .{ .Uint = serial },
        });
    }
};

pub const xdg_toplevel = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    configureFn: ?WLCallbackFn = null,
    closeFn: ?WLCallbackFn = null,
    configure_boundsFn: ?WLCallbackFn = null,
    wm_capabilitiesFn: ?WLCallbackFn = null,
    const configure_name = "configure";
    const configure_arg = &[_]Arg{
        .{ .name = "width", .argType = .Int },
        .{ .name = "height", .argType = .Int },
        .{ .name = "states", .argType = .Array },
    };
    const close_name = "close";
    const close_arg = &[_]Arg{};
    const configure_bounds_name = "configure_bounds";
    const configure_bounds_arg = &[_]Arg{
        .{ .name = "width", .argType = .Int },
        .{ .name = "height", .argType = .Int },
    };
    const wm_capabilities_name = "wm_capabilities";
    const wm_capabilities_arg = &[_]Arg{
        .{ .name = "capabilities", .argType = .Array },
    };
    pub fn get_callback(self: xdg_toplevel, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = configure_name, .args = configure_arg, .ctx = self.ctx, .func = self.configureFn },
            1 => .{ .name = close_name, .args = close_arg, .ctx = self.ctx, .func = self.closeFn },
            2 => .{ .name = configure_bounds_name, .args = configure_bounds_arg, .ctx = self.ctx, .func = self.configure_boundsFn },
            3 => .{ .name = wm_capabilities_name, .args = wm_capabilities_arg, .ctx = self.ctx, .func = self.wm_capabilitiesFn },
            else => null,
        };
    }
    pub fn destroyFn(
        self: *xdg_toplevel,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn set_parentFn(
        self: *xdg_toplevel,
        parent: Object,
    ) void {
        _ = self;
        _ = parent;
        try self.conn.sendMessage(&.{
            .{ .Object = parent },
        });
    }
    pub fn set_titleFn(
        self: *xdg_toplevel,
        title: String,
    ) void {
        _ = self;
        _ = title;
        try self.conn.sendMessage(&.{
            .{ .String = title },
        });
    }
    pub fn set_app_idFn(
        self: *xdg_toplevel,
        app_id: String,
    ) void {
        _ = self;
        _ = app_id;
        try self.conn.sendMessage(&.{
            .{ .String = app_id },
        });
    }
    pub fn show_window_menuFn(
        self: *xdg_toplevel,
        seat: Object,
        serial: Uint,
        x: Int,
        y: Int,
    ) void {
        _ = self;
        _ = seat;
        _ = serial;
        _ = x;
        _ = y;
        try self.conn.sendMessage(&.{
            .{ .Object = seat },
            .{ .Uint = serial },
            .{ .Int = x },
            .{ .Int = y },
        });
    }
    pub fn moveFn(
        self: *xdg_toplevel,
        seat: Object,
        serial: Uint,
    ) void {
        _ = self;
        _ = seat;
        _ = serial;
        try self.conn.sendMessage(&.{
            .{ .Object = seat },
            .{ .Uint = serial },
        });
    }
    pub fn resizeFn(
        self: *xdg_toplevel,
        seat: Object,
        serial: Uint,
        edges: Uint,
    ) void {
        _ = self;
        _ = seat;
        _ = serial;
        _ = edges;
        try self.conn.sendMessage(&.{
            .{ .Object = seat },
            .{ .Uint = serial },
            .{ .Uint = edges },
        });
    }
    pub fn set_max_sizeFn(
        self: *xdg_toplevel,
        width: Int,
        height: Int,
    ) void {
        _ = self;
        _ = width;
        _ = height;
        try self.conn.sendMessage(&.{
            .{ .Int = width },
            .{ .Int = height },
        });
    }
    pub fn set_min_sizeFn(
        self: *xdg_toplevel,
        width: Int,
        height: Int,
    ) void {
        _ = self;
        _ = width;
        _ = height;
        try self.conn.sendMessage(&.{
            .{ .Int = width },
            .{ .Int = height },
        });
    }
    pub fn set_maximizedFn(
        self: *xdg_toplevel,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn unset_maximizedFn(
        self: *xdg_toplevel,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn set_fullscreenFn(
        self: *xdg_toplevel,
        output: Object,
    ) void {
        _ = self;
        _ = output;
        try self.conn.sendMessage(&.{
            .{ .Object = output },
        });
    }
    pub fn unset_fullscreenFn(
        self: *xdg_toplevel,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn set_minimizedFn(
        self: *xdg_toplevel,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
};

pub const xdg_popup = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    configureFn: ?WLCallbackFn = null,
    popup_doneFn: ?WLCallbackFn = null,
    repositionedFn: ?WLCallbackFn = null,
    const configure_name = "configure";
    const configure_arg = &[_]Arg{
        .{ .name = "x", .argType = .Int },
        .{ .name = "y", .argType = .Int },
        .{ .name = "width", .argType = .Int },
        .{ .name = "height", .argType = .Int },
    };
    const popup_done_name = "popup_done";
    const popup_done_arg = &[_]Arg{};
    const repositioned_name = "repositioned";
    const repositioned_arg = &[_]Arg{
        .{ .name = "token", .argType = .Uint },
    };
    pub fn get_callback(self: xdg_popup, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = configure_name, .args = configure_arg, .ctx = self.ctx, .func = self.configureFn },
            1 => .{ .name = popup_done_name, .args = popup_done_arg, .ctx = self.ctx, .func = self.popup_doneFn },
            2 => .{ .name = repositioned_name, .args = repositioned_arg, .ctx = self.ctx, .func = self.repositionedFn },
            else => null,
        };
    }
    pub fn destroyFn(
        self: *xdg_popup,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn grabFn(
        self: *xdg_popup,
        seat: Object,
        serial: Uint,
    ) void {
        _ = self;
        _ = seat;
        _ = serial;
        try self.conn.sendMessage(&.{
            .{ .Object = seat },
            .{ .Uint = serial },
        });
    }
    pub fn repositionFn(
        self: *xdg_popup,
        positioner: Object,
        token: Uint,
    ) void {
        _ = self;
        _ = positioner;
        _ = token;
        try self.conn.sendMessage(&.{
            .{ .Object = positioner },
            .{ .Uint = token },
        });
    }
};

pub const zwp_fullscreen_shell_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    capabilityFn: ?WLCallbackFn = null,
    const capability_name = "capability";
    const capability_arg = &[_]Arg{
        .{ .name = "capability", .argType = .Uint },
    };
    pub fn get_callback(self: zwp_fullscreen_shell_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = capability_name, .args = capability_arg, .ctx = self.ctx, .func = self.capabilityFn },
            else => null,
        };
    }
    pub fn releaseFn(
        self: *zwp_fullscreen_shell_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn present_surfaceFn(
        self: *zwp_fullscreen_shell_v1,
        surface: Object,
        method: Uint,
        output: Object,
    ) void {
        _ = self;
        _ = surface;
        _ = method;
        _ = output;
        try self.conn.sendMessage(&.{
            .{ .Object = surface },
            .{ .Uint = method },
            .{ .Object = output },
        });
    }
    pub fn present_surface_for_modeFn(
        self: *zwp_fullscreen_shell_v1,
        surface: Object,
        output: Object,
        framerate: Int,
        mode_successful: ?WLCallbackFn,
        mode_failed: ?WLCallbackFn,
        present_cancelled: ?WLCallbackFn,
    ) *zwp_fullscreen_shell_mode_feedback_v1 {
        _ = self;
        _ = surface;
        _ = output;
        _ = framerate;
        _ = mode_successful;
        _ = mode_failed;
        _ = present_cancelled;
        try self.conn.sendMessage(&.{
            .{ .Object = surface },
            .{ .Object = output },
            .{ .Int = framerate },
        });
    }
};

pub const zwp_fullscreen_shell_mode_feedback_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    mode_successfulFn: ?WLCallbackFn = null,
    mode_failedFn: ?WLCallbackFn = null,
    present_cancelledFn: ?WLCallbackFn = null,
    const mode_successful_name = "mode_successful";
    const mode_successful_arg = &[_]Arg{};
    const mode_failed_name = "mode_failed";
    const mode_failed_arg = &[_]Arg{};
    const present_cancelled_name = "present_cancelled";
    const present_cancelled_arg = &[_]Arg{};
    pub fn get_callback(self: zwp_fullscreen_shell_mode_feedback_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = mode_successful_name, .args = mode_successful_arg, .ctx = self.ctx, .func = self.mode_successfulFn },
            1 => .{ .name = mode_failed_name, .args = mode_failed_arg, .ctx = self.ctx, .func = self.mode_failedFn },
            2 => .{ .name = present_cancelled_name, .args = present_cancelled_arg, .ctx = self.ctx, .func = self.present_cancelledFn },
            else => null,
        };
    }
};

pub const zwp_idle_inhibit_manager_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    pub fn get_callback(self: zwp_idle_inhibit_manager_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            else => null,
        };
    }
    pub fn destroyFn(
        self: *zwp_idle_inhibit_manager_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn create_inhibitorFn(
        self: *zwp_idle_inhibit_manager_v1,
        surface: Object,
    ) *zwp_idle_inhibitor_v1 {
        _ = self;
        _ = surface;
        try self.conn.sendMessage(&.{
            .{ .Object = surface },
        });
    }
};

pub const zwp_idle_inhibitor_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    pub fn get_callback(self: zwp_idle_inhibitor_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            else => null,
        };
    }
    pub fn destroyFn(
        self: *zwp_idle_inhibitor_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
};

pub const zwp_input_method_context_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    surrounding_textFn: ?WLCallbackFn = null,
    resetFn: ?WLCallbackFn = null,
    content_typeFn: ?WLCallbackFn = null,
    invoke_actionFn: ?WLCallbackFn = null,
    commit_stateFn: ?WLCallbackFn = null,
    preferred_languageFn: ?WLCallbackFn = null,
    const surrounding_text_name = "surrounding_text";
    const surrounding_text_arg = &[_]Arg{
        .{ .name = "text", .argType = .String },
        .{ .name = "cursor", .argType = .Uint },
        .{ .name = "anchor", .argType = .Uint },
    };
    const reset_name = "reset";
    const reset_arg = &[_]Arg{};
    const content_type_name = "content_type";
    const content_type_arg = &[_]Arg{
        .{ .name = "hint", .argType = .Uint },
        .{ .name = "purpose", .argType = .Uint },
    };
    const invoke_action_name = "invoke_action";
    const invoke_action_arg = &[_]Arg{
        .{ .name = "button", .argType = .Uint },
        .{ .name = "index", .argType = .Uint },
    };
    const commit_state_name = "commit_state";
    const commit_state_arg = &[_]Arg{
        .{ .name = "serial", .argType = .Uint },
    };
    const preferred_language_name = "preferred_language";
    const preferred_language_arg = &[_]Arg{
        .{ .name = "language", .argType = .String },
    };
    pub fn get_callback(self: zwp_input_method_context_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = surrounding_text_name, .args = surrounding_text_arg, .ctx = self.ctx, .func = self.surrounding_textFn },
            1 => .{ .name = reset_name, .args = reset_arg, .ctx = self.ctx, .func = self.resetFn },
            2 => .{ .name = content_type_name, .args = content_type_arg, .ctx = self.ctx, .func = self.content_typeFn },
            3 => .{ .name = invoke_action_name, .args = invoke_action_arg, .ctx = self.ctx, .func = self.invoke_actionFn },
            4 => .{ .name = commit_state_name, .args = commit_state_arg, .ctx = self.ctx, .func = self.commit_stateFn },
            5 => .{ .name = preferred_language_name, .args = preferred_language_arg, .ctx = self.ctx, .func = self.preferred_languageFn },
            else => null,
        };
    }
    pub fn destroyFn(
        self: *zwp_input_method_context_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn commit_stringFn(
        self: *zwp_input_method_context_v1,
        serial: Uint,
        text: String,
    ) void {
        _ = self;
        _ = serial;
        _ = text;
        try self.conn.sendMessage(&.{
            .{ .Uint = serial },
            .{ .String = text },
        });
    }
    pub fn preedit_stringFn(
        self: *zwp_input_method_context_v1,
        serial: Uint,
        text: String,
        commit: String,
    ) void {
        _ = self;
        _ = serial;
        _ = text;
        _ = commit;
        try self.conn.sendMessage(&.{
            .{ .Uint = serial },
            .{ .String = text },
            .{ .String = commit },
        });
    }
    pub fn preedit_stylingFn(
        self: *zwp_input_method_context_v1,
        index: Uint,
        length: Uint,
        style: Uint,
    ) void {
        _ = self;
        _ = index;
        _ = length;
        _ = style;
        try self.conn.sendMessage(&.{
            .{ .Uint = index },
            .{ .Uint = length },
            .{ .Uint = style },
        });
    }
    pub fn preedit_cursorFn(
        self: *zwp_input_method_context_v1,
        index: Int,
    ) void {
        _ = self;
        _ = index;
        try self.conn.sendMessage(&.{
            .{ .Int = index },
        });
    }
    pub fn delete_surrounding_textFn(
        self: *zwp_input_method_context_v1,
        index: Int,
        length: Uint,
    ) void {
        _ = self;
        _ = index;
        _ = length;
        try self.conn.sendMessage(&.{
            .{ .Int = index },
            .{ .Uint = length },
        });
    }
    pub fn cursor_positionFn(
        self: *zwp_input_method_context_v1,
        index: Int,
        anchor: Int,
    ) void {
        _ = self;
        _ = index;
        _ = anchor;
        try self.conn.sendMessage(&.{
            .{ .Int = index },
            .{ .Int = anchor },
        });
    }
    pub fn modifiers_mapFn(
        self: *zwp_input_method_context_v1,
        map: Array,
    ) void {
        _ = self;
        _ = map;
        try self.conn.sendMessage(&.{
            .{ .Array = map },
        });
    }
    pub fn keysymFn(
        self: *zwp_input_method_context_v1,
        serial: Uint,
        time: Uint,
        sym: Uint,
        state: Uint,
        modifiers: Uint,
    ) void {
        _ = self;
        _ = serial;
        _ = time;
        _ = sym;
        _ = state;
        _ = modifiers;
        try self.conn.sendMessage(&.{
            .{ .Uint = serial },
            .{ .Uint = time },
            .{ .Uint = sym },
            .{ .Uint = state },
            .{ .Uint = modifiers },
        });
    }
    pub fn grab_keyboardFn(
        self: *zwp_input_method_context_v1,
        keymap: ?WLCallbackFn,
        enter: ?WLCallbackFn,
        leave: ?WLCallbackFn,
        key: ?WLCallbackFn,
        modifiers: ?WLCallbackFn,
        repeat_info: ?WLCallbackFn,
    ) *wl_keyboard {
        _ = self;
        _ = keymap;
        _ = enter;
        _ = leave;
        _ = key;
        _ = modifiers;
        _ = repeat_info;
        try self.conn.sendMessage(&.{});
    }
    pub fn keyFn(
        self: *zwp_input_method_context_v1,
        serial: Uint,
        time: Uint,
        key: Uint,
        state: Uint,
    ) void {
        _ = self;
        _ = serial;
        _ = time;
        _ = key;
        _ = state;
        try self.conn.sendMessage(&.{
            .{ .Uint = serial },
            .{ .Uint = time },
            .{ .Uint = key },
            .{ .Uint = state },
        });
    }
    pub fn modifiersFn(
        self: *zwp_input_method_context_v1,
        serial: Uint,
        mods_depressed: Uint,
        mods_latched: Uint,
        mods_locked: Uint,
        group: Uint,
    ) void {
        _ = self;
        _ = serial;
        _ = mods_depressed;
        _ = mods_latched;
        _ = mods_locked;
        _ = group;
        try self.conn.sendMessage(&.{
            .{ .Uint = serial },
            .{ .Uint = mods_depressed },
            .{ .Uint = mods_latched },
            .{ .Uint = mods_locked },
            .{ .Uint = group },
        });
    }
    pub fn languageFn(
        self: *zwp_input_method_context_v1,
        serial: Uint,
        language: String,
    ) void {
        _ = self;
        _ = serial;
        _ = language;
        try self.conn.sendMessage(&.{
            .{ .Uint = serial },
            .{ .String = language },
        });
    }
    pub fn text_directionFn(
        self: *zwp_input_method_context_v1,
        serial: Uint,
        direction: Uint,
    ) void {
        _ = self;
        _ = serial;
        _ = direction;
        try self.conn.sendMessage(&.{
            .{ .Uint = serial },
            .{ .Uint = direction },
        });
    }
};

pub const zwp_input_method_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    activateFn: ?WLCallbackFn = null,
    deactivateFn: ?WLCallbackFn = null,
    const activate_name = "activate";
    const activate_arg = &[_]Arg{
        .{ .name = "id", .argType = .NewId },
    };
    const deactivate_name = "deactivate";
    const deactivate_arg = &[_]Arg{
        .{ .name = "context", .argType = .Object },
    };
    pub fn get_callback(self: zwp_input_method_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = activate_name, .args = activate_arg, .ctx = self.ctx, .func = self.activateFn },
            1 => .{ .name = deactivate_name, .args = deactivate_arg, .ctx = self.ctx, .func = self.deactivateFn },
            else => null,
        };
    }
};

pub const zwp_input_panel_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    pub fn get_callback(self: zwp_input_panel_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            else => null,
        };
    }
    pub fn get_input_panel_surfaceFn(
        self: *zwp_input_panel_v1,
        surface: Object,
    ) *zwp_input_panel_surface_v1 {
        _ = self;
        _ = surface;
        try self.conn.sendMessage(&.{
            .{ .Object = surface },
        });
    }
};

pub const zwp_input_panel_surface_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    pub fn get_callback(self: zwp_input_panel_surface_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            else => null,
        };
    }
    pub fn set_toplevelFn(
        self: *zwp_input_panel_surface_v1,
        output: Object,
        position: Uint,
    ) void {
        _ = self;
        _ = output;
        _ = position;
        try self.conn.sendMessage(&.{
            .{ .Object = output },
            .{ .Uint = position },
        });
    }
    pub fn set_overlay_panelFn(
        self: *zwp_input_panel_surface_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
};

pub const zwp_input_timestamps_manager_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    pub fn get_callback(self: zwp_input_timestamps_manager_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            else => null,
        };
    }
    pub fn destroyFn(
        self: *zwp_input_timestamps_manager_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn get_keyboard_timestampsFn(
        self: *zwp_input_timestamps_manager_v1,
        timestamp: ?WLCallbackFn,
        keyboard: Object,
    ) *zwp_input_timestamps_v1 {
        _ = self;
        _ = timestamp;
        _ = keyboard;
        try self.conn.sendMessage(&.{
            .{ .Object = keyboard },
        });
    }
    pub fn get_pointer_timestampsFn(
        self: *zwp_input_timestamps_manager_v1,
        timestamp: ?WLCallbackFn,
        pointer: Object,
    ) *zwp_input_timestamps_v1 {
        _ = self;
        _ = timestamp;
        _ = pointer;
        try self.conn.sendMessage(&.{
            .{ .Object = pointer },
        });
    }
    pub fn get_touch_timestampsFn(
        self: *zwp_input_timestamps_manager_v1,
        timestamp: ?WLCallbackFn,
        touch: Object,
    ) *zwp_input_timestamps_v1 {
        _ = self;
        _ = timestamp;
        _ = touch;
        try self.conn.sendMessage(&.{
            .{ .Object = touch },
        });
    }
};

pub const zwp_input_timestamps_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    timestampFn: ?WLCallbackFn = null,
    const timestamp_name = "timestamp";
    const timestamp_arg = &[_]Arg{
        .{ .name = "tv_sec_hi", .argType = .Uint },
        .{ .name = "tv_sec_lo", .argType = .Uint },
        .{ .name = "tv_nsec", .argType = .Uint },
    };
    pub fn get_callback(self: zwp_input_timestamps_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = timestamp_name, .args = timestamp_arg, .ctx = self.ctx, .func = self.timestampFn },
            else => null,
        };
    }
    pub fn destroyFn(
        self: *zwp_input_timestamps_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
};

pub const zwp_keyboard_shortcuts_inhibit_manager_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    pub fn get_callback(self: zwp_keyboard_shortcuts_inhibit_manager_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            else => null,
        };
    }
    pub fn destroyFn(
        self: *zwp_keyboard_shortcuts_inhibit_manager_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn inhibit_shortcutsFn(
        self: *zwp_keyboard_shortcuts_inhibit_manager_v1,
        active: ?WLCallbackFn,
        inactive: ?WLCallbackFn,
        surface: Object,
        seat: Object,
    ) *zwp_keyboard_shortcuts_inhibitor_v1 {
        _ = self;
        _ = active;
        _ = inactive;
        _ = surface;
        _ = seat;
        try self.conn.sendMessage(&.{
            .{ .Object = surface },
            .{ .Object = seat },
        });
    }
};

pub const zwp_keyboard_shortcuts_inhibitor_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    activeFn: ?WLCallbackFn = null,
    inactiveFn: ?WLCallbackFn = null,
    const active_name = "active";
    const active_arg = &[_]Arg{};
    const inactive_name = "inactive";
    const inactive_arg = &[_]Arg{};
    pub fn get_callback(self: zwp_keyboard_shortcuts_inhibitor_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = active_name, .args = active_arg, .ctx = self.ctx, .func = self.activeFn },
            1 => .{ .name = inactive_name, .args = inactive_arg, .ctx = self.ctx, .func = self.inactiveFn },
            else => null,
        };
    }
    pub fn destroyFn(
        self: *zwp_keyboard_shortcuts_inhibitor_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
};

pub const zwp_linux_dmabuf_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    formatFn: ?WLCallbackFn = null,
    modifierFn: ?WLCallbackFn = null,
    const format_name = "format";
    const format_arg = &[_]Arg{
        .{ .name = "format", .argType = .Uint },
    };
    const modifier_name = "modifier";
    const modifier_arg = &[_]Arg{
        .{ .name = "format", .argType = .Uint },
        .{ .name = "modifier_hi", .argType = .Uint },
        .{ .name = "modifier_lo", .argType = .Uint },
    };
    pub fn get_callback(self: zwp_linux_dmabuf_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = format_name, .args = format_arg, .ctx = self.ctx, .func = self.formatFn },
            1 => .{ .name = modifier_name, .args = modifier_arg, .ctx = self.ctx, .func = self.modifierFn },
            else => null,
        };
    }
    pub fn destroyFn(
        self: *zwp_linux_dmabuf_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn create_paramsFn(
        self: *zwp_linux_dmabuf_v1,
        created: ?WLCallbackFn,
        failed: ?WLCallbackFn,
    ) *zwp_linux_buffer_params_v1 {
        _ = self;
        _ = created;
        _ = failed;
        try self.conn.sendMessage(&.{});
    }
    pub fn get_default_feedbackFn(
        self: *zwp_linux_dmabuf_v1,
        done: ?WLCallbackFn,
        format_table: ?WLCallbackFn,
        main_device: ?WLCallbackFn,
        tranche_done: ?WLCallbackFn,
        tranche_target_device: ?WLCallbackFn,
        tranche_formats: ?WLCallbackFn,
        tranche_flags: ?WLCallbackFn,
    ) *zwp_linux_dmabuf_feedback_v1 {
        _ = self;
        _ = done;
        _ = format_table;
        _ = main_device;
        _ = tranche_done;
        _ = tranche_target_device;
        _ = tranche_formats;
        _ = tranche_flags;
        try self.conn.sendMessage(&.{});
    }
    pub fn get_surface_feedbackFn(
        self: *zwp_linux_dmabuf_v1,
        done: ?WLCallbackFn,
        format_table: ?WLCallbackFn,
        main_device: ?WLCallbackFn,
        tranche_done: ?WLCallbackFn,
        tranche_target_device: ?WLCallbackFn,
        tranche_formats: ?WLCallbackFn,
        tranche_flags: ?WLCallbackFn,
        surface: Object,
    ) *zwp_linux_dmabuf_feedback_v1 {
        _ = self;
        _ = done;
        _ = format_table;
        _ = main_device;
        _ = tranche_done;
        _ = tranche_target_device;
        _ = tranche_formats;
        _ = tranche_flags;
        _ = surface;
        try self.conn.sendMessage(&.{
            .{ .Object = surface },
        });
    }
};

pub const zwp_linux_buffer_params_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    createdFn: ?WLCallbackFn = null,
    failedFn: ?WLCallbackFn = null,
    const created_name = "created";
    const created_arg = &[_]Arg{
        .{ .name = "buffer", .argType = .NewId },
    };
    const failed_name = "failed";
    const failed_arg = &[_]Arg{};
    pub fn get_callback(self: zwp_linux_buffer_params_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = created_name, .args = created_arg, .ctx = self.ctx, .func = self.createdFn },
            1 => .{ .name = failed_name, .args = failed_arg, .ctx = self.ctx, .func = self.failedFn },
            else => null,
        };
    }
    pub fn destroyFn(
        self: *zwp_linux_buffer_params_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn addFn(
        self: *zwp_linux_buffer_params_v1,
        fd: Fd,
        plane_idx: Uint,
        offset: Uint,
        stride: Uint,
        modifier_hi: Uint,
        modifier_lo: Uint,
    ) void {
        _ = self;
        _ = fd;
        _ = plane_idx;
        _ = offset;
        _ = stride;
        _ = modifier_hi;
        _ = modifier_lo;
        try self.conn.sendMessage(&.{
            .{ .Fd = fd },
            .{ .Uint = plane_idx },
            .{ .Uint = offset },
            .{ .Uint = stride },
            .{ .Uint = modifier_hi },
            .{ .Uint = modifier_lo },
        });
    }
    pub fn createFn(
        self: *zwp_linux_buffer_params_v1,
        width: Int,
        height: Int,
        format: Uint,
        flags: Uint,
    ) void {
        _ = self;
        _ = width;
        _ = height;
        _ = format;
        _ = flags;
        try self.conn.sendMessage(&.{
            .{ .Int = width },
            .{ .Int = height },
            .{ .Uint = format },
            .{ .Uint = flags },
        });
    }
    pub fn create_immedFn(
        self: *zwp_linux_buffer_params_v1,
        release: ?WLCallbackFn,
        width: Int,
        height: Int,
        format: Uint,
        flags: Uint,
    ) *wl_buffer {
        _ = self;
        _ = release;
        _ = width;
        _ = height;
        _ = format;
        _ = flags;
        try self.conn.sendMessage(&.{
            .{ .Int = width },
            .{ .Int = height },
            .{ .Uint = format },
            .{ .Uint = flags },
        });
    }
};

pub const zwp_linux_dmabuf_feedback_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    doneFn: ?WLCallbackFn = null,
    format_tableFn: ?WLCallbackFn = null,
    main_deviceFn: ?WLCallbackFn = null,
    tranche_doneFn: ?WLCallbackFn = null,
    tranche_target_deviceFn: ?WLCallbackFn = null,
    tranche_formatsFn: ?WLCallbackFn = null,
    tranche_flagsFn: ?WLCallbackFn = null,
    const done_name = "done";
    const done_arg = &[_]Arg{};
    const format_table_name = "format_table";
    const format_table_arg = &[_]Arg{
        .{ .name = "fd", .argType = .Fd },
        .{ .name = "size", .argType = .Uint },
    };
    const main_device_name = "main_device";
    const main_device_arg = &[_]Arg{
        .{ .name = "device", .argType = .Array },
    };
    const tranche_done_name = "tranche_done";
    const tranche_done_arg = &[_]Arg{};
    const tranche_target_device_name = "tranche_target_device";
    const tranche_target_device_arg = &[_]Arg{
        .{ .name = "device", .argType = .Array },
    };
    const tranche_formats_name = "tranche_formats";
    const tranche_formats_arg = &[_]Arg{
        .{ .name = "indices", .argType = .Array },
    };
    const tranche_flags_name = "tranche_flags";
    const tranche_flags_arg = &[_]Arg{
        .{ .name = "flags", .argType = .Uint },
    };
    pub fn get_callback(self: zwp_linux_dmabuf_feedback_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = done_name, .args = done_arg, .ctx = self.ctx, .func = self.doneFn },
            1 => .{ .name = format_table_name, .args = format_table_arg, .ctx = self.ctx, .func = self.format_tableFn },
            2 => .{ .name = main_device_name, .args = main_device_arg, .ctx = self.ctx, .func = self.main_deviceFn },
            3 => .{ .name = tranche_done_name, .args = tranche_done_arg, .ctx = self.ctx, .func = self.tranche_doneFn },
            4 => .{ .name = tranche_target_device_name, .args = tranche_target_device_arg, .ctx = self.ctx, .func = self.tranche_target_deviceFn },
            5 => .{ .name = tranche_formats_name, .args = tranche_formats_arg, .ctx = self.ctx, .func = self.tranche_formatsFn },
            6 => .{ .name = tranche_flags_name, .args = tranche_flags_arg, .ctx = self.ctx, .func = self.tranche_flagsFn },
            else => null,
        };
    }
    pub fn destroyFn(
        self: *zwp_linux_dmabuf_feedback_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
};

pub const zwp_linux_explicit_synchronization_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    pub fn get_callback(self: zwp_linux_explicit_synchronization_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            else => null,
        };
    }
    pub fn destroyFn(
        self: *zwp_linux_explicit_synchronization_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn get_synchronizationFn(
        self: *zwp_linux_explicit_synchronization_v1,
        surface: Object,
    ) *zwp_linux_surface_synchronization_v1 {
        _ = self;
        _ = surface;
        try self.conn.sendMessage(&.{
            .{ .Object = surface },
        });
    }
};

pub const zwp_linux_surface_synchronization_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    pub fn get_callback(self: zwp_linux_surface_synchronization_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            else => null,
        };
    }
    pub fn destroyFn(
        self: *zwp_linux_surface_synchronization_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn set_acquire_fenceFn(
        self: *zwp_linux_surface_synchronization_v1,
        fd: Fd,
    ) void {
        _ = self;
        _ = fd;
        try self.conn.sendMessage(&.{
            .{ .Fd = fd },
        });
    }
    pub fn get_releaseFn(
        self: *zwp_linux_surface_synchronization_v1,
        fenced_release: ?WLCallbackFn,
        immediate_release: ?WLCallbackFn,
    ) *zwp_linux_buffer_release_v1 {
        _ = self;
        _ = fenced_release;
        _ = immediate_release;
        try self.conn.sendMessage(&.{});
    }
};

pub const zwp_linux_buffer_release_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    fenced_releaseFn: ?WLCallbackFn = null,
    immediate_releaseFn: ?WLCallbackFn = null,
    const fenced_release_name = "fenced_release";
    const fenced_release_arg = &[_]Arg{
        .{ .name = "fence", .argType = .Fd },
    };
    const immediate_release_name = "immediate_release";
    const immediate_release_arg = &[_]Arg{};
    pub fn get_callback(self: zwp_linux_buffer_release_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = fenced_release_name, .args = fenced_release_arg, .ctx = self.ctx, .func = self.fenced_releaseFn },
            1 => .{ .name = immediate_release_name, .args = immediate_release_arg, .ctx = self.ctx, .func = self.immediate_releaseFn },
            else => null,
        };
    }
};

pub const zwp_pointer_constraints_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    pub fn get_callback(self: zwp_pointer_constraints_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            else => null,
        };
    }
    pub fn destroyFn(
        self: *zwp_pointer_constraints_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn lock_pointerFn(
        self: *zwp_pointer_constraints_v1,
        locked: ?WLCallbackFn,
        unlocked: ?WLCallbackFn,
        surface: Object,
        pointer: Object,
        region: Object,
        lifetime: Uint,
    ) *zwp_locked_pointer_v1 {
        _ = self;
        _ = locked;
        _ = unlocked;
        _ = surface;
        _ = pointer;
        _ = region;
        _ = lifetime;
        try self.conn.sendMessage(&.{
            .{ .Object = surface },
            .{ .Object = pointer },
            .{ .Object = region },
            .{ .Uint = lifetime },
        });
    }
    pub fn confine_pointerFn(
        self: *zwp_pointer_constraints_v1,
        confined: ?WLCallbackFn,
        unconfined: ?WLCallbackFn,
        surface: Object,
        pointer: Object,
        region: Object,
        lifetime: Uint,
    ) *zwp_confined_pointer_v1 {
        _ = self;
        _ = confined;
        _ = unconfined;
        _ = surface;
        _ = pointer;
        _ = region;
        _ = lifetime;
        try self.conn.sendMessage(&.{
            .{ .Object = surface },
            .{ .Object = pointer },
            .{ .Object = region },
            .{ .Uint = lifetime },
        });
    }
};

pub const zwp_locked_pointer_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    lockedFn: ?WLCallbackFn = null,
    unlockedFn: ?WLCallbackFn = null,
    const locked_name = "locked";
    const locked_arg = &[_]Arg{};
    const unlocked_name = "unlocked";
    const unlocked_arg = &[_]Arg{};
    pub fn get_callback(self: zwp_locked_pointer_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = locked_name, .args = locked_arg, .ctx = self.ctx, .func = self.lockedFn },
            1 => .{ .name = unlocked_name, .args = unlocked_arg, .ctx = self.ctx, .func = self.unlockedFn },
            else => null,
        };
    }
    pub fn destroyFn(
        self: *zwp_locked_pointer_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn set_cursor_position_hintFn(
        self: *zwp_locked_pointer_v1,
        surface_x: Fixed,
        surface_y: Fixed,
    ) void {
        _ = self;
        _ = surface_x;
        _ = surface_y;
        try self.conn.sendMessage(&.{
            .{ .Fixed = surface_x },
            .{ .Fixed = surface_y },
        });
    }
    pub fn set_regionFn(
        self: *zwp_locked_pointer_v1,
        region: Object,
    ) void {
        _ = self;
        _ = region;
        try self.conn.sendMessage(&.{
            .{ .Object = region },
        });
    }
};

pub const zwp_confined_pointer_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    confinedFn: ?WLCallbackFn = null,
    unconfinedFn: ?WLCallbackFn = null,
    const confined_name = "confined";
    const confined_arg = &[_]Arg{};
    const unconfined_name = "unconfined";
    const unconfined_arg = &[_]Arg{};
    pub fn get_callback(self: zwp_confined_pointer_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = confined_name, .args = confined_arg, .ctx = self.ctx, .func = self.confinedFn },
            1 => .{ .name = unconfined_name, .args = unconfined_arg, .ctx = self.ctx, .func = self.unconfinedFn },
            else => null,
        };
    }
    pub fn destroyFn(
        self: *zwp_confined_pointer_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn set_regionFn(
        self: *zwp_confined_pointer_v1,
        region: Object,
    ) void {
        _ = self;
        _ = region;
        try self.conn.sendMessage(&.{
            .{ .Object = region },
        });
    }
};

pub const zwp_pointer_gestures_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    pub fn get_callback(self: zwp_pointer_gestures_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            else => null,
        };
    }
    pub fn get_swipe_gestureFn(
        self: *zwp_pointer_gestures_v1,
        begin: ?WLCallbackFn,
        update: ?WLCallbackFn,
        end: ?WLCallbackFn,
        pointer: Object,
    ) *zwp_pointer_gesture_swipe_v1 {
        _ = self;
        _ = begin;
        _ = update;
        _ = end;
        _ = pointer;
        try self.conn.sendMessage(&.{
            .{ .Object = pointer },
        });
    }
    pub fn get_pinch_gestureFn(
        self: *zwp_pointer_gestures_v1,
        begin: ?WLCallbackFn,
        update: ?WLCallbackFn,
        end: ?WLCallbackFn,
        pointer: Object,
    ) *zwp_pointer_gesture_pinch_v1 {
        _ = self;
        _ = begin;
        _ = update;
        _ = end;
        _ = pointer;
        try self.conn.sendMessage(&.{
            .{ .Object = pointer },
        });
    }
    pub fn releaseFn(
        self: *zwp_pointer_gestures_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn get_hold_gestureFn(
        self: *zwp_pointer_gestures_v1,
        begin: ?WLCallbackFn,
        end: ?WLCallbackFn,
        pointer: Object,
    ) *zwp_pointer_gesture_hold_v1 {
        _ = self;
        _ = begin;
        _ = end;
        _ = pointer;
        try self.conn.sendMessage(&.{
            .{ .Object = pointer },
        });
    }
};

pub const zwp_pointer_gesture_swipe_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    beginFn: ?WLCallbackFn = null,
    updateFn: ?WLCallbackFn = null,
    endFn: ?WLCallbackFn = null,
    const begin_name = "begin";
    const begin_arg = &[_]Arg{
        .{ .name = "serial", .argType = .Uint },
        .{ .name = "time", .argType = .Uint },
        .{ .name = "surface", .argType = .Object },
        .{ .name = "fingers", .argType = .Uint },
    };
    const update_name = "update";
    const update_arg = &[_]Arg{
        .{ .name = "time", .argType = .Uint },
        .{ .name = "dx", .argType = .Fixed },
        .{ .name = "dy", .argType = .Fixed },
    };
    const end_name = "end";
    const end_arg = &[_]Arg{
        .{ .name = "serial", .argType = .Uint },
        .{ .name = "time", .argType = .Uint },
        .{ .name = "cancelled", .argType = .Int },
    };
    pub fn get_callback(self: zwp_pointer_gesture_swipe_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = begin_name, .args = begin_arg, .ctx = self.ctx, .func = self.beginFn },
            1 => .{ .name = update_name, .args = update_arg, .ctx = self.ctx, .func = self.updateFn },
            2 => .{ .name = end_name, .args = end_arg, .ctx = self.ctx, .func = self.endFn },
            else => null,
        };
    }
    pub fn destroyFn(
        self: *zwp_pointer_gesture_swipe_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
};

pub const zwp_pointer_gesture_pinch_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    beginFn: ?WLCallbackFn = null,
    updateFn: ?WLCallbackFn = null,
    endFn: ?WLCallbackFn = null,
    const begin_name = "begin";
    const begin_arg = &[_]Arg{
        .{ .name = "serial", .argType = .Uint },
        .{ .name = "time", .argType = .Uint },
        .{ .name = "surface", .argType = .Object },
        .{ .name = "fingers", .argType = .Uint },
    };
    const update_name = "update";
    const update_arg = &[_]Arg{
        .{ .name = "time", .argType = .Uint },
        .{ .name = "dx", .argType = .Fixed },
        .{ .name = "dy", .argType = .Fixed },
        .{ .name = "scale", .argType = .Fixed },
        .{ .name = "rotation", .argType = .Fixed },
    };
    const end_name = "end";
    const end_arg = &[_]Arg{
        .{ .name = "serial", .argType = .Uint },
        .{ .name = "time", .argType = .Uint },
        .{ .name = "cancelled", .argType = .Int },
    };
    pub fn get_callback(self: zwp_pointer_gesture_pinch_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = begin_name, .args = begin_arg, .ctx = self.ctx, .func = self.beginFn },
            1 => .{ .name = update_name, .args = update_arg, .ctx = self.ctx, .func = self.updateFn },
            2 => .{ .name = end_name, .args = end_arg, .ctx = self.ctx, .func = self.endFn },
            else => null,
        };
    }
    pub fn destroyFn(
        self: *zwp_pointer_gesture_pinch_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
};

pub const zwp_pointer_gesture_hold_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    beginFn: ?WLCallbackFn = null,
    endFn: ?WLCallbackFn = null,
    const begin_name = "begin";
    const begin_arg = &[_]Arg{
        .{ .name = "serial", .argType = .Uint },
        .{ .name = "time", .argType = .Uint },
        .{ .name = "surface", .argType = .Object },
        .{ .name = "fingers", .argType = .Uint },
    };
    const end_name = "end";
    const end_arg = &[_]Arg{
        .{ .name = "serial", .argType = .Uint },
        .{ .name = "time", .argType = .Uint },
        .{ .name = "cancelled", .argType = .Int },
    };
    pub fn get_callback(self: zwp_pointer_gesture_hold_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = begin_name, .args = begin_arg, .ctx = self.ctx, .func = self.beginFn },
            1 => .{ .name = end_name, .args = end_arg, .ctx = self.ctx, .func = self.endFn },
            else => null,
        };
    }
    pub fn destroyFn(
        self: *zwp_pointer_gesture_hold_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
};

pub const zwp_primary_selection_device_manager_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    pub fn get_callback(self: zwp_primary_selection_device_manager_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            else => null,
        };
    }
    pub fn create_sourceFn(
        self: *zwp_primary_selection_device_manager_v1,
        send: ?WLCallbackFn,
        cancelled: ?WLCallbackFn,
    ) *zwp_primary_selection_source_v1 {
        _ = self;
        _ = send;
        _ = cancelled;
        try self.conn.sendMessage(&.{});
    }
    pub fn get_deviceFn(
        self: *zwp_primary_selection_device_manager_v1,
        data_offer: ?WLCallbackFn,
        selection: ?WLCallbackFn,
        seat: Object,
    ) *zwp_primary_selection_device_v1 {
        _ = self;
        _ = data_offer;
        _ = selection;
        _ = seat;
        try self.conn.sendMessage(&.{
            .{ .Object = seat },
        });
    }
    pub fn destroyFn(
        self: *zwp_primary_selection_device_manager_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
};

pub const zwp_primary_selection_device_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    data_offerFn: ?WLCallbackFn = null,
    selectionFn: ?WLCallbackFn = null,
    const data_offer_name = "data_offer";
    const data_offer_arg = &[_]Arg{
        .{ .name = "offer", .argType = .NewId },
    };
    const selection_name = "selection";
    const selection_arg = &[_]Arg{
        .{ .name = "id", .argType = .Object },
    };
    pub fn get_callback(self: zwp_primary_selection_device_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = data_offer_name, .args = data_offer_arg, .ctx = self.ctx, .func = self.data_offerFn },
            1 => .{ .name = selection_name, .args = selection_arg, .ctx = self.ctx, .func = self.selectionFn },
            else => null,
        };
    }
    pub fn set_selectionFn(
        self: *zwp_primary_selection_device_v1,
        source: Object,
        serial: Uint,
    ) void {
        _ = self;
        _ = source;
        _ = serial;
        try self.conn.sendMessage(&.{
            .{ .Object = source },
            .{ .Uint = serial },
        });
    }
    pub fn destroyFn(
        self: *zwp_primary_selection_device_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
};

pub const zwp_primary_selection_offer_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    offerFn: ?WLCallbackFn = null,
    const offer_name = "offer";
    const offer_arg = &[_]Arg{
        .{ .name = "mime_type", .argType = .String },
    };
    pub fn get_callback(self: zwp_primary_selection_offer_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = offer_name, .args = offer_arg, .ctx = self.ctx, .func = self.offerFn },
            else => null,
        };
    }
    pub fn receiveFn(
        self: *zwp_primary_selection_offer_v1,
        mime_type: String,
        fd: Fd,
    ) void {
        _ = self;
        _ = mime_type;
        _ = fd;
        try self.conn.sendMessage(&.{
            .{ .String = mime_type },
            .{ .Fd = fd },
        });
    }
    pub fn destroyFn(
        self: *zwp_primary_selection_offer_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
};

pub const zwp_primary_selection_source_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    sendFn: ?WLCallbackFn = null,
    cancelledFn: ?WLCallbackFn = null,
    const send_name = "send";
    const send_arg = &[_]Arg{
        .{ .name = "mime_type", .argType = .String },
        .{ .name = "fd", .argType = .Fd },
    };
    const cancelled_name = "cancelled";
    const cancelled_arg = &[_]Arg{};
    pub fn get_callback(self: zwp_primary_selection_source_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = send_name, .args = send_arg, .ctx = self.ctx, .func = self.sendFn },
            1 => .{ .name = cancelled_name, .args = cancelled_arg, .ctx = self.ctx, .func = self.cancelledFn },
            else => null,
        };
    }
    pub fn offerFn(
        self: *zwp_primary_selection_source_v1,
        mime_type: String,
    ) void {
        _ = self;
        _ = mime_type;
        try self.conn.sendMessage(&.{
            .{ .String = mime_type },
        });
    }
    pub fn destroyFn(
        self: *zwp_primary_selection_source_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
};

pub const zwp_relative_pointer_manager_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    pub fn get_callback(self: zwp_relative_pointer_manager_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            else => null,
        };
    }
    pub fn destroyFn(
        self: *zwp_relative_pointer_manager_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn get_relative_pointerFn(
        self: *zwp_relative_pointer_manager_v1,
        relative_motion: ?WLCallbackFn,
        pointer: Object,
    ) *zwp_relative_pointer_v1 {
        _ = self;
        _ = relative_motion;
        _ = pointer;
        try self.conn.sendMessage(&.{
            .{ .Object = pointer },
        });
    }
};

pub const zwp_relative_pointer_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    relative_motionFn: ?WLCallbackFn = null,
    const relative_motion_name = "relative_motion";
    const relative_motion_arg = &[_]Arg{
        .{ .name = "utime_hi", .argType = .Uint },
        .{ .name = "utime_lo", .argType = .Uint },
        .{ .name = "dx", .argType = .Fixed },
        .{ .name = "dy", .argType = .Fixed },
        .{ .name = "dx_unaccel", .argType = .Fixed },
        .{ .name = "dy_unaccel", .argType = .Fixed },
    };
    pub fn get_callback(self: zwp_relative_pointer_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = relative_motion_name, .args = relative_motion_arg, .ctx = self.ctx, .func = self.relative_motionFn },
            else => null,
        };
    }
    pub fn destroyFn(
        self: *zwp_relative_pointer_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
};

pub const zwp_tablet_manager_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    pub fn get_callback(self: zwp_tablet_manager_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            else => null,
        };
    }
    pub fn get_tablet_seatFn(
        self: *zwp_tablet_manager_v1,
        tablet_added: ?WLCallbackFn,
        tool_added: ?WLCallbackFn,
        seat: Object,
    ) *zwp_tablet_seat_v1 {
        _ = self;
        _ = tablet_added;
        _ = tool_added;
        _ = seat;
        try self.conn.sendMessage(&.{
            .{ .Object = seat },
        });
    }
    pub fn destroyFn(
        self: *zwp_tablet_manager_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
};

pub const zwp_tablet_seat_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    tablet_addedFn: ?WLCallbackFn = null,
    tool_addedFn: ?WLCallbackFn = null,
    const tablet_added_name = "tablet_added";
    const tablet_added_arg = &[_]Arg{
        .{ .name = "id", .argType = .NewId },
    };
    const tool_added_name = "tool_added";
    const tool_added_arg = &[_]Arg{
        .{ .name = "id", .argType = .NewId },
    };
    pub fn get_callback(self: zwp_tablet_seat_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = tablet_added_name, .args = tablet_added_arg, .ctx = self.ctx, .func = self.tablet_addedFn },
            1 => .{ .name = tool_added_name, .args = tool_added_arg, .ctx = self.ctx, .func = self.tool_addedFn },
            else => null,
        };
    }
    pub fn destroyFn(
        self: *zwp_tablet_seat_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
};

pub const zwp_tablet_tool_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    typeFn: ?WLCallbackFn = null,
    hardware_serialFn: ?WLCallbackFn = null,
    hardware_id_wacomFn: ?WLCallbackFn = null,
    capabilityFn: ?WLCallbackFn = null,
    doneFn: ?WLCallbackFn = null,
    removedFn: ?WLCallbackFn = null,
    proximity_inFn: ?WLCallbackFn = null,
    proximity_outFn: ?WLCallbackFn = null,
    downFn: ?WLCallbackFn = null,
    upFn: ?WLCallbackFn = null,
    motionFn: ?WLCallbackFn = null,
    pressureFn: ?WLCallbackFn = null,
    distanceFn: ?WLCallbackFn = null,
    tiltFn: ?WLCallbackFn = null,
    rotationFn: ?WLCallbackFn = null,
    sliderFn: ?WLCallbackFn = null,
    wheelFn: ?WLCallbackFn = null,
    buttonFn: ?WLCallbackFn = null,
    frameFn: ?WLCallbackFn = null,
    const type_name = "type";
    const type_arg = &[_]Arg{
        .{ .name = "tool_type", .argType = .Uint },
    };
    const hardware_serial_name = "hardware_serial";
    const hardware_serial_arg = &[_]Arg{
        .{ .name = "hardware_serial_hi", .argType = .Uint },
        .{ .name = "hardware_serial_lo", .argType = .Uint },
    };
    const hardware_id_wacom_name = "hardware_id_wacom";
    const hardware_id_wacom_arg = &[_]Arg{
        .{ .name = "hardware_id_hi", .argType = .Uint },
        .{ .name = "hardware_id_lo", .argType = .Uint },
    };
    const capability_name = "capability";
    const capability_arg = &[_]Arg{
        .{ .name = "capability", .argType = .Uint },
    };
    const done_name = "done";
    const done_arg = &[_]Arg{};
    const removed_name = "removed";
    const removed_arg = &[_]Arg{};
    const proximity_in_name = "proximity_in";
    const proximity_in_arg = &[_]Arg{
        .{ .name = "serial", .argType = .Uint },
        .{ .name = "tablet", .argType = .Object },
        .{ .name = "surface", .argType = .Object },
    };
    const proximity_out_name = "proximity_out";
    const proximity_out_arg = &[_]Arg{};
    const down_name = "down";
    const down_arg = &[_]Arg{
        .{ .name = "serial", .argType = .Uint },
    };
    const up_name = "up";
    const up_arg = &[_]Arg{};
    const motion_name = "motion";
    const motion_arg = &[_]Arg{
        .{ .name = "x", .argType = .Fixed },
        .{ .name = "y", .argType = .Fixed },
    };
    const pressure_name = "pressure";
    const pressure_arg = &[_]Arg{
        .{ .name = "pressure", .argType = .Uint },
    };
    const distance_name = "distance";
    const distance_arg = &[_]Arg{
        .{ .name = "distance", .argType = .Uint },
    };
    const tilt_name = "tilt";
    const tilt_arg = &[_]Arg{
        .{ .name = "tilt_x", .argType = .Int },
        .{ .name = "tilt_y", .argType = .Int },
    };
    const rotation_name = "rotation";
    const rotation_arg = &[_]Arg{
        .{ .name = "degrees", .argType = .Int },
    };
    const slider_name = "slider";
    const slider_arg = &[_]Arg{
        .{ .name = "position", .argType = .Int },
    };
    const wheel_name = "wheel";
    const wheel_arg = &[_]Arg{
        .{ .name = "degrees", .argType = .Int },
        .{ .name = "clicks", .argType = .Int },
    };
    const button_name = "button";
    const button_arg = &[_]Arg{
        .{ .name = "serial", .argType = .Uint },
        .{ .name = "button", .argType = .Uint },
        .{ .name = "state", .argType = .Uint },
    };
    const frame_name = "frame";
    const frame_arg = &[_]Arg{
        .{ .name = "time", .argType = .Uint },
    };
    pub fn get_callback(self: zwp_tablet_tool_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = type_name, .args = type_arg, .ctx = self.ctx, .func = self.typeFn },
            1 => .{ .name = hardware_serial_name, .args = hardware_serial_arg, .ctx = self.ctx, .func = self.hardware_serialFn },
            2 => .{ .name = hardware_id_wacom_name, .args = hardware_id_wacom_arg, .ctx = self.ctx, .func = self.hardware_id_wacomFn },
            3 => .{ .name = capability_name, .args = capability_arg, .ctx = self.ctx, .func = self.capabilityFn },
            4 => .{ .name = done_name, .args = done_arg, .ctx = self.ctx, .func = self.doneFn },
            5 => .{ .name = removed_name, .args = removed_arg, .ctx = self.ctx, .func = self.removedFn },
            6 => .{ .name = proximity_in_name, .args = proximity_in_arg, .ctx = self.ctx, .func = self.proximity_inFn },
            7 => .{ .name = proximity_out_name, .args = proximity_out_arg, .ctx = self.ctx, .func = self.proximity_outFn },
            8 => .{ .name = down_name, .args = down_arg, .ctx = self.ctx, .func = self.downFn },
            9 => .{ .name = up_name, .args = up_arg, .ctx = self.ctx, .func = self.upFn },
            10 => .{ .name = motion_name, .args = motion_arg, .ctx = self.ctx, .func = self.motionFn },
            11 => .{ .name = pressure_name, .args = pressure_arg, .ctx = self.ctx, .func = self.pressureFn },
            12 => .{ .name = distance_name, .args = distance_arg, .ctx = self.ctx, .func = self.distanceFn },
            13 => .{ .name = tilt_name, .args = tilt_arg, .ctx = self.ctx, .func = self.tiltFn },
            14 => .{ .name = rotation_name, .args = rotation_arg, .ctx = self.ctx, .func = self.rotationFn },
            15 => .{ .name = slider_name, .args = slider_arg, .ctx = self.ctx, .func = self.sliderFn },
            16 => .{ .name = wheel_name, .args = wheel_arg, .ctx = self.ctx, .func = self.wheelFn },
            17 => .{ .name = button_name, .args = button_arg, .ctx = self.ctx, .func = self.buttonFn },
            18 => .{ .name = frame_name, .args = frame_arg, .ctx = self.ctx, .func = self.frameFn },
            else => null,
        };
    }
    pub fn set_cursorFn(
        self: *zwp_tablet_tool_v1,
        serial: Uint,
        surface: Object,
        hotspot_x: Int,
        hotspot_y: Int,
    ) void {
        _ = self;
        _ = serial;
        _ = surface;
        _ = hotspot_x;
        _ = hotspot_y;
        try self.conn.sendMessage(&.{
            .{ .Uint = serial },
            .{ .Object = surface },
            .{ .Int = hotspot_x },
            .{ .Int = hotspot_y },
        });
    }
    pub fn destroyFn(
        self: *zwp_tablet_tool_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
};

pub const zwp_tablet_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    nameFn: ?WLCallbackFn = null,
    idFn: ?WLCallbackFn = null,
    pathFn: ?WLCallbackFn = null,
    doneFn: ?WLCallbackFn = null,
    removedFn: ?WLCallbackFn = null,
    const name_name = "name";
    const name_arg = &[_]Arg{
        .{ .name = "name", .argType = .String },
    };
    const id_name = "id";
    const id_arg = &[_]Arg{
        .{ .name = "vid", .argType = .Uint },
        .{ .name = "pid", .argType = .Uint },
    };
    const path_name = "path";
    const path_arg = &[_]Arg{
        .{ .name = "path", .argType = .String },
    };
    const done_name = "done";
    const done_arg = &[_]Arg{};
    const removed_name = "removed";
    const removed_arg = &[_]Arg{};
    pub fn get_callback(self: zwp_tablet_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = name_name, .args = name_arg, .ctx = self.ctx, .func = self.nameFn },
            1 => .{ .name = id_name, .args = id_arg, .ctx = self.ctx, .func = self.idFn },
            2 => .{ .name = path_name, .args = path_arg, .ctx = self.ctx, .func = self.pathFn },
            3 => .{ .name = done_name, .args = done_arg, .ctx = self.ctx, .func = self.doneFn },
            4 => .{ .name = removed_name, .args = removed_arg, .ctx = self.ctx, .func = self.removedFn },
            else => null,
        };
    }
    pub fn destroyFn(
        self: *zwp_tablet_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
};

pub const zwp_tablet_manager_v2 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    pub fn get_callback(self: zwp_tablet_manager_v2, idx: u16) ?WLCallback {
        return switch (idx) {
            else => null,
        };
    }
    pub fn get_tablet_seatFn(
        self: *zwp_tablet_manager_v2,
        tablet_added: ?WLCallbackFn,
        tool_added: ?WLCallbackFn,
        pad_added: ?WLCallbackFn,
        seat: Object,
    ) *zwp_tablet_seat_v2 {
        _ = self;
        _ = tablet_added;
        _ = tool_added;
        _ = pad_added;
        _ = seat;
        try self.conn.sendMessage(&.{
            .{ .Object = seat },
        });
    }
    pub fn destroyFn(
        self: *zwp_tablet_manager_v2,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
};

pub const zwp_tablet_seat_v2 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    tablet_addedFn: ?WLCallbackFn = null,
    tool_addedFn: ?WLCallbackFn = null,
    pad_addedFn: ?WLCallbackFn = null,
    const tablet_added_name = "tablet_added";
    const tablet_added_arg = &[_]Arg{
        .{ .name = "id", .argType = .NewId },
    };
    const tool_added_name = "tool_added";
    const tool_added_arg = &[_]Arg{
        .{ .name = "id", .argType = .NewId },
    };
    const pad_added_name = "pad_added";
    const pad_added_arg = &[_]Arg{
        .{ .name = "id", .argType = .NewId },
    };
    pub fn get_callback(self: zwp_tablet_seat_v2, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = tablet_added_name, .args = tablet_added_arg, .ctx = self.ctx, .func = self.tablet_addedFn },
            1 => .{ .name = tool_added_name, .args = tool_added_arg, .ctx = self.ctx, .func = self.tool_addedFn },
            2 => .{ .name = pad_added_name, .args = pad_added_arg, .ctx = self.ctx, .func = self.pad_addedFn },
            else => null,
        };
    }
    pub fn destroyFn(
        self: *zwp_tablet_seat_v2,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
};

pub const zwp_tablet_tool_v2 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    typeFn: ?WLCallbackFn = null,
    hardware_serialFn: ?WLCallbackFn = null,
    hardware_id_wacomFn: ?WLCallbackFn = null,
    capabilityFn: ?WLCallbackFn = null,
    doneFn: ?WLCallbackFn = null,
    removedFn: ?WLCallbackFn = null,
    proximity_inFn: ?WLCallbackFn = null,
    proximity_outFn: ?WLCallbackFn = null,
    downFn: ?WLCallbackFn = null,
    upFn: ?WLCallbackFn = null,
    motionFn: ?WLCallbackFn = null,
    pressureFn: ?WLCallbackFn = null,
    distanceFn: ?WLCallbackFn = null,
    tiltFn: ?WLCallbackFn = null,
    rotationFn: ?WLCallbackFn = null,
    sliderFn: ?WLCallbackFn = null,
    wheelFn: ?WLCallbackFn = null,
    buttonFn: ?WLCallbackFn = null,
    frameFn: ?WLCallbackFn = null,
    const type_name = "type";
    const type_arg = &[_]Arg{
        .{ .name = "tool_type", .argType = .Uint },
    };
    const hardware_serial_name = "hardware_serial";
    const hardware_serial_arg = &[_]Arg{
        .{ .name = "hardware_serial_hi", .argType = .Uint },
        .{ .name = "hardware_serial_lo", .argType = .Uint },
    };
    const hardware_id_wacom_name = "hardware_id_wacom";
    const hardware_id_wacom_arg = &[_]Arg{
        .{ .name = "hardware_id_hi", .argType = .Uint },
        .{ .name = "hardware_id_lo", .argType = .Uint },
    };
    const capability_name = "capability";
    const capability_arg = &[_]Arg{
        .{ .name = "capability", .argType = .Uint },
    };
    const done_name = "done";
    const done_arg = &[_]Arg{};
    const removed_name = "removed";
    const removed_arg = &[_]Arg{};
    const proximity_in_name = "proximity_in";
    const proximity_in_arg = &[_]Arg{
        .{ .name = "serial", .argType = .Uint },
        .{ .name = "tablet", .argType = .Object },
        .{ .name = "surface", .argType = .Object },
    };
    const proximity_out_name = "proximity_out";
    const proximity_out_arg = &[_]Arg{};
    const down_name = "down";
    const down_arg = &[_]Arg{
        .{ .name = "serial", .argType = .Uint },
    };
    const up_name = "up";
    const up_arg = &[_]Arg{};
    const motion_name = "motion";
    const motion_arg = &[_]Arg{
        .{ .name = "x", .argType = .Fixed },
        .{ .name = "y", .argType = .Fixed },
    };
    const pressure_name = "pressure";
    const pressure_arg = &[_]Arg{
        .{ .name = "pressure", .argType = .Uint },
    };
    const distance_name = "distance";
    const distance_arg = &[_]Arg{
        .{ .name = "distance", .argType = .Uint },
    };
    const tilt_name = "tilt";
    const tilt_arg = &[_]Arg{
        .{ .name = "tilt_x", .argType = .Fixed },
        .{ .name = "tilt_y", .argType = .Fixed },
    };
    const rotation_name = "rotation";
    const rotation_arg = &[_]Arg{
        .{ .name = "degrees", .argType = .Fixed },
    };
    const slider_name = "slider";
    const slider_arg = &[_]Arg{
        .{ .name = "position", .argType = .Int },
    };
    const wheel_name = "wheel";
    const wheel_arg = &[_]Arg{
        .{ .name = "degrees", .argType = .Fixed },
        .{ .name = "clicks", .argType = .Int },
    };
    const button_name = "button";
    const button_arg = &[_]Arg{
        .{ .name = "serial", .argType = .Uint },
        .{ .name = "button", .argType = .Uint },
        .{ .name = "state", .argType = .Uint },
    };
    const frame_name = "frame";
    const frame_arg = &[_]Arg{
        .{ .name = "time", .argType = .Uint },
    };
    pub fn get_callback(self: zwp_tablet_tool_v2, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = type_name, .args = type_arg, .ctx = self.ctx, .func = self.typeFn },
            1 => .{ .name = hardware_serial_name, .args = hardware_serial_arg, .ctx = self.ctx, .func = self.hardware_serialFn },
            2 => .{ .name = hardware_id_wacom_name, .args = hardware_id_wacom_arg, .ctx = self.ctx, .func = self.hardware_id_wacomFn },
            3 => .{ .name = capability_name, .args = capability_arg, .ctx = self.ctx, .func = self.capabilityFn },
            4 => .{ .name = done_name, .args = done_arg, .ctx = self.ctx, .func = self.doneFn },
            5 => .{ .name = removed_name, .args = removed_arg, .ctx = self.ctx, .func = self.removedFn },
            6 => .{ .name = proximity_in_name, .args = proximity_in_arg, .ctx = self.ctx, .func = self.proximity_inFn },
            7 => .{ .name = proximity_out_name, .args = proximity_out_arg, .ctx = self.ctx, .func = self.proximity_outFn },
            8 => .{ .name = down_name, .args = down_arg, .ctx = self.ctx, .func = self.downFn },
            9 => .{ .name = up_name, .args = up_arg, .ctx = self.ctx, .func = self.upFn },
            10 => .{ .name = motion_name, .args = motion_arg, .ctx = self.ctx, .func = self.motionFn },
            11 => .{ .name = pressure_name, .args = pressure_arg, .ctx = self.ctx, .func = self.pressureFn },
            12 => .{ .name = distance_name, .args = distance_arg, .ctx = self.ctx, .func = self.distanceFn },
            13 => .{ .name = tilt_name, .args = tilt_arg, .ctx = self.ctx, .func = self.tiltFn },
            14 => .{ .name = rotation_name, .args = rotation_arg, .ctx = self.ctx, .func = self.rotationFn },
            15 => .{ .name = slider_name, .args = slider_arg, .ctx = self.ctx, .func = self.sliderFn },
            16 => .{ .name = wheel_name, .args = wheel_arg, .ctx = self.ctx, .func = self.wheelFn },
            17 => .{ .name = button_name, .args = button_arg, .ctx = self.ctx, .func = self.buttonFn },
            18 => .{ .name = frame_name, .args = frame_arg, .ctx = self.ctx, .func = self.frameFn },
            else => null,
        };
    }
    pub fn set_cursorFn(
        self: *zwp_tablet_tool_v2,
        serial: Uint,
        surface: Object,
        hotspot_x: Int,
        hotspot_y: Int,
    ) void {
        _ = self;
        _ = serial;
        _ = surface;
        _ = hotspot_x;
        _ = hotspot_y;
        try self.conn.sendMessage(&.{
            .{ .Uint = serial },
            .{ .Object = surface },
            .{ .Int = hotspot_x },
            .{ .Int = hotspot_y },
        });
    }
    pub fn destroyFn(
        self: *zwp_tablet_tool_v2,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
};

pub const zwp_tablet_v2 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    nameFn: ?WLCallbackFn = null,
    idFn: ?WLCallbackFn = null,
    pathFn: ?WLCallbackFn = null,
    doneFn: ?WLCallbackFn = null,
    removedFn: ?WLCallbackFn = null,
    const name_name = "name";
    const name_arg = &[_]Arg{
        .{ .name = "name", .argType = .String },
    };
    const id_name = "id";
    const id_arg = &[_]Arg{
        .{ .name = "vid", .argType = .Uint },
        .{ .name = "pid", .argType = .Uint },
    };
    const path_name = "path";
    const path_arg = &[_]Arg{
        .{ .name = "path", .argType = .String },
    };
    const done_name = "done";
    const done_arg = &[_]Arg{};
    const removed_name = "removed";
    const removed_arg = &[_]Arg{};
    pub fn get_callback(self: zwp_tablet_v2, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = name_name, .args = name_arg, .ctx = self.ctx, .func = self.nameFn },
            1 => .{ .name = id_name, .args = id_arg, .ctx = self.ctx, .func = self.idFn },
            2 => .{ .name = path_name, .args = path_arg, .ctx = self.ctx, .func = self.pathFn },
            3 => .{ .name = done_name, .args = done_arg, .ctx = self.ctx, .func = self.doneFn },
            4 => .{ .name = removed_name, .args = removed_arg, .ctx = self.ctx, .func = self.removedFn },
            else => null,
        };
    }
    pub fn destroyFn(
        self: *zwp_tablet_v2,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
};

pub const zwp_tablet_pad_ring_v2 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    sourceFn: ?WLCallbackFn = null,
    angleFn: ?WLCallbackFn = null,
    stopFn: ?WLCallbackFn = null,
    frameFn: ?WLCallbackFn = null,
    const source_name = "source";
    const source_arg = &[_]Arg{
        .{ .name = "source", .argType = .Uint },
    };
    const angle_name = "angle";
    const angle_arg = &[_]Arg{
        .{ .name = "degrees", .argType = .Fixed },
    };
    const stop_name = "stop";
    const stop_arg = &[_]Arg{};
    const frame_name = "frame";
    const frame_arg = &[_]Arg{
        .{ .name = "time", .argType = .Uint },
    };
    pub fn get_callback(self: zwp_tablet_pad_ring_v2, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = source_name, .args = source_arg, .ctx = self.ctx, .func = self.sourceFn },
            1 => .{ .name = angle_name, .args = angle_arg, .ctx = self.ctx, .func = self.angleFn },
            2 => .{ .name = stop_name, .args = stop_arg, .ctx = self.ctx, .func = self.stopFn },
            3 => .{ .name = frame_name, .args = frame_arg, .ctx = self.ctx, .func = self.frameFn },
            else => null,
        };
    }
    pub fn set_feedbackFn(
        self: *zwp_tablet_pad_ring_v2,
        description: String,
        serial: Uint,
    ) void {
        _ = self;
        _ = description;
        _ = serial;
        try self.conn.sendMessage(&.{
            .{ .String = description },
            .{ .Uint = serial },
        });
    }
    pub fn destroyFn(
        self: *zwp_tablet_pad_ring_v2,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
};

pub const zwp_tablet_pad_strip_v2 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    sourceFn: ?WLCallbackFn = null,
    positionFn: ?WLCallbackFn = null,
    stopFn: ?WLCallbackFn = null,
    frameFn: ?WLCallbackFn = null,
    const source_name = "source";
    const source_arg = &[_]Arg{
        .{ .name = "source", .argType = .Uint },
    };
    const position_name = "position";
    const position_arg = &[_]Arg{
        .{ .name = "position", .argType = .Uint },
    };
    const stop_name = "stop";
    const stop_arg = &[_]Arg{};
    const frame_name = "frame";
    const frame_arg = &[_]Arg{
        .{ .name = "time", .argType = .Uint },
    };
    pub fn get_callback(self: zwp_tablet_pad_strip_v2, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = source_name, .args = source_arg, .ctx = self.ctx, .func = self.sourceFn },
            1 => .{ .name = position_name, .args = position_arg, .ctx = self.ctx, .func = self.positionFn },
            2 => .{ .name = stop_name, .args = stop_arg, .ctx = self.ctx, .func = self.stopFn },
            3 => .{ .name = frame_name, .args = frame_arg, .ctx = self.ctx, .func = self.frameFn },
            else => null,
        };
    }
    pub fn set_feedbackFn(
        self: *zwp_tablet_pad_strip_v2,
        description: String,
        serial: Uint,
    ) void {
        _ = self;
        _ = description;
        _ = serial;
        try self.conn.sendMessage(&.{
            .{ .String = description },
            .{ .Uint = serial },
        });
    }
    pub fn destroyFn(
        self: *zwp_tablet_pad_strip_v2,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
};

pub const zwp_tablet_pad_group_v2 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    buttonsFn: ?WLCallbackFn = null,
    ringFn: ?WLCallbackFn = null,
    stripFn: ?WLCallbackFn = null,
    modesFn: ?WLCallbackFn = null,
    doneFn: ?WLCallbackFn = null,
    mode_switchFn: ?WLCallbackFn = null,
    const buttons_name = "buttons";
    const buttons_arg = &[_]Arg{
        .{ .name = "buttons", .argType = .Array },
    };
    const ring_name = "ring";
    const ring_arg = &[_]Arg{
        .{ .name = "ring", .argType = .NewId },
    };
    const strip_name = "strip";
    const strip_arg = &[_]Arg{
        .{ .name = "strip", .argType = .NewId },
    };
    const modes_name = "modes";
    const modes_arg = &[_]Arg{
        .{ .name = "modes", .argType = .Uint },
    };
    const done_name = "done";
    const done_arg = &[_]Arg{};
    const mode_switch_name = "mode_switch";
    const mode_switch_arg = &[_]Arg{
        .{ .name = "time", .argType = .Uint },
        .{ .name = "serial", .argType = .Uint },
        .{ .name = "mode", .argType = .Uint },
    };
    pub fn get_callback(self: zwp_tablet_pad_group_v2, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = buttons_name, .args = buttons_arg, .ctx = self.ctx, .func = self.buttonsFn },
            1 => .{ .name = ring_name, .args = ring_arg, .ctx = self.ctx, .func = self.ringFn },
            2 => .{ .name = strip_name, .args = strip_arg, .ctx = self.ctx, .func = self.stripFn },
            3 => .{ .name = modes_name, .args = modes_arg, .ctx = self.ctx, .func = self.modesFn },
            4 => .{ .name = done_name, .args = done_arg, .ctx = self.ctx, .func = self.doneFn },
            5 => .{ .name = mode_switch_name, .args = mode_switch_arg, .ctx = self.ctx, .func = self.mode_switchFn },
            else => null,
        };
    }
    pub fn destroyFn(
        self: *zwp_tablet_pad_group_v2,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
};

pub const zwp_tablet_pad_v2 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    groupFn: ?WLCallbackFn = null,
    pathFn: ?WLCallbackFn = null,
    buttonsFn: ?WLCallbackFn = null,
    doneFn: ?WLCallbackFn = null,
    buttonFn: ?WLCallbackFn = null,
    enterFn: ?WLCallbackFn = null,
    leaveFn: ?WLCallbackFn = null,
    removedFn: ?WLCallbackFn = null,
    const group_name = "group";
    const group_arg = &[_]Arg{
        .{ .name = "pad_group", .argType = .NewId },
    };
    const path_name = "path";
    const path_arg = &[_]Arg{
        .{ .name = "path", .argType = .String },
    };
    const buttons_name = "buttons";
    const buttons_arg = &[_]Arg{
        .{ .name = "buttons", .argType = .Uint },
    };
    const done_name = "done";
    const done_arg = &[_]Arg{};
    const button_name = "button";
    const button_arg = &[_]Arg{
        .{ .name = "time", .argType = .Uint },
        .{ .name = "button", .argType = .Uint },
        .{ .name = "state", .argType = .Uint },
    };
    const enter_name = "enter";
    const enter_arg = &[_]Arg{
        .{ .name = "serial", .argType = .Uint },
        .{ .name = "tablet", .argType = .Object },
        .{ .name = "surface", .argType = .Object },
    };
    const leave_name = "leave";
    const leave_arg = &[_]Arg{
        .{ .name = "serial", .argType = .Uint },
        .{ .name = "surface", .argType = .Object },
    };
    const removed_name = "removed";
    const removed_arg = &[_]Arg{};
    pub fn get_callback(self: zwp_tablet_pad_v2, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = group_name, .args = group_arg, .ctx = self.ctx, .func = self.groupFn },
            1 => .{ .name = path_name, .args = path_arg, .ctx = self.ctx, .func = self.pathFn },
            2 => .{ .name = buttons_name, .args = buttons_arg, .ctx = self.ctx, .func = self.buttonsFn },
            3 => .{ .name = done_name, .args = done_arg, .ctx = self.ctx, .func = self.doneFn },
            4 => .{ .name = button_name, .args = button_arg, .ctx = self.ctx, .func = self.buttonFn },
            5 => .{ .name = enter_name, .args = enter_arg, .ctx = self.ctx, .func = self.enterFn },
            6 => .{ .name = leave_name, .args = leave_arg, .ctx = self.ctx, .func = self.leaveFn },
            7 => .{ .name = removed_name, .args = removed_arg, .ctx = self.ctx, .func = self.removedFn },
            else => null,
        };
    }
    pub fn set_feedbackFn(
        self: *zwp_tablet_pad_v2,
        button: Uint,
        description: String,
        serial: Uint,
    ) void {
        _ = self;
        _ = button;
        _ = description;
        _ = serial;
        try self.conn.sendMessage(&.{
            .{ .Uint = button },
            .{ .String = description },
            .{ .Uint = serial },
        });
    }
    pub fn destroyFn(
        self: *zwp_tablet_pad_v2,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
};

pub const zwp_text_input_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    enterFn: ?WLCallbackFn = null,
    leaveFn: ?WLCallbackFn = null,
    modifiers_mapFn: ?WLCallbackFn = null,
    input_panel_stateFn: ?WLCallbackFn = null,
    preedit_stringFn: ?WLCallbackFn = null,
    preedit_stylingFn: ?WLCallbackFn = null,
    preedit_cursorFn: ?WLCallbackFn = null,
    commit_stringFn: ?WLCallbackFn = null,
    cursor_positionFn: ?WLCallbackFn = null,
    delete_surrounding_textFn: ?WLCallbackFn = null,
    keysymFn: ?WLCallbackFn = null,
    languageFn: ?WLCallbackFn = null,
    text_directionFn: ?WLCallbackFn = null,
    const enter_name = "enter";
    const enter_arg = &[_]Arg{
        .{ .name = "surface", .argType = .Object },
    };
    const leave_name = "leave";
    const leave_arg = &[_]Arg{};
    const modifiers_map_name = "modifiers_map";
    const modifiers_map_arg = &[_]Arg{
        .{ .name = "map", .argType = .Array },
    };
    const input_panel_state_name = "input_panel_state";
    const input_panel_state_arg = &[_]Arg{
        .{ .name = "state", .argType = .Uint },
    };
    const preedit_string_name = "preedit_string";
    const preedit_string_arg = &[_]Arg{
        .{ .name = "serial", .argType = .Uint },
        .{ .name = "text", .argType = .String },
        .{ .name = "commit", .argType = .String },
    };
    const preedit_styling_name = "preedit_styling";
    const preedit_styling_arg = &[_]Arg{
        .{ .name = "index", .argType = .Uint },
        .{ .name = "length", .argType = .Uint },
        .{ .name = "style", .argType = .Uint },
    };
    const preedit_cursor_name = "preedit_cursor";
    const preedit_cursor_arg = &[_]Arg{
        .{ .name = "index", .argType = .Int },
    };
    const commit_string_name = "commit_string";
    const commit_string_arg = &[_]Arg{
        .{ .name = "serial", .argType = .Uint },
        .{ .name = "text", .argType = .String },
    };
    const cursor_position_name = "cursor_position";
    const cursor_position_arg = &[_]Arg{
        .{ .name = "index", .argType = .Int },
        .{ .name = "anchor", .argType = .Int },
    };
    const delete_surrounding_text_name = "delete_surrounding_text";
    const delete_surrounding_text_arg = &[_]Arg{
        .{ .name = "index", .argType = .Int },
        .{ .name = "length", .argType = .Uint },
    };
    const keysym_name = "keysym";
    const keysym_arg = &[_]Arg{
        .{ .name = "serial", .argType = .Uint },
        .{ .name = "time", .argType = .Uint },
        .{ .name = "sym", .argType = .Uint },
        .{ .name = "state", .argType = .Uint },
        .{ .name = "modifiers", .argType = .Uint },
    };
    const language_name = "language";
    const language_arg = &[_]Arg{
        .{ .name = "serial", .argType = .Uint },
        .{ .name = "language", .argType = .String },
    };
    const text_direction_name = "text_direction";
    const text_direction_arg = &[_]Arg{
        .{ .name = "serial", .argType = .Uint },
        .{ .name = "direction", .argType = .Uint },
    };
    pub fn get_callback(self: zwp_text_input_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = enter_name, .args = enter_arg, .ctx = self.ctx, .func = self.enterFn },
            1 => .{ .name = leave_name, .args = leave_arg, .ctx = self.ctx, .func = self.leaveFn },
            2 => .{ .name = modifiers_map_name, .args = modifiers_map_arg, .ctx = self.ctx, .func = self.modifiers_mapFn },
            3 => .{ .name = input_panel_state_name, .args = input_panel_state_arg, .ctx = self.ctx, .func = self.input_panel_stateFn },
            4 => .{ .name = preedit_string_name, .args = preedit_string_arg, .ctx = self.ctx, .func = self.preedit_stringFn },
            5 => .{ .name = preedit_styling_name, .args = preedit_styling_arg, .ctx = self.ctx, .func = self.preedit_stylingFn },
            6 => .{ .name = preedit_cursor_name, .args = preedit_cursor_arg, .ctx = self.ctx, .func = self.preedit_cursorFn },
            7 => .{ .name = commit_string_name, .args = commit_string_arg, .ctx = self.ctx, .func = self.commit_stringFn },
            8 => .{ .name = cursor_position_name, .args = cursor_position_arg, .ctx = self.ctx, .func = self.cursor_positionFn },
            9 => .{ .name = delete_surrounding_text_name, .args = delete_surrounding_text_arg, .ctx = self.ctx, .func = self.delete_surrounding_textFn },
            10 => .{ .name = keysym_name, .args = keysym_arg, .ctx = self.ctx, .func = self.keysymFn },
            11 => .{ .name = language_name, .args = language_arg, .ctx = self.ctx, .func = self.languageFn },
            12 => .{ .name = text_direction_name, .args = text_direction_arg, .ctx = self.ctx, .func = self.text_directionFn },
            else => null,
        };
    }
    pub fn activateFn(
        self: *zwp_text_input_v1,
        seat: Object,
        surface: Object,
    ) void {
        _ = self;
        _ = seat;
        _ = surface;
        try self.conn.sendMessage(&.{
            .{ .Object = seat },
            .{ .Object = surface },
        });
    }
    pub fn deactivateFn(
        self: *zwp_text_input_v1,
        seat: Object,
    ) void {
        _ = self;
        _ = seat;
        try self.conn.sendMessage(&.{
            .{ .Object = seat },
        });
    }
    pub fn show_input_panelFn(
        self: *zwp_text_input_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn hide_input_panelFn(
        self: *zwp_text_input_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn resetFn(
        self: *zwp_text_input_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn set_surrounding_textFn(
        self: *zwp_text_input_v1,
        text: String,
        cursor: Uint,
        anchor: Uint,
    ) void {
        _ = self;
        _ = text;
        _ = cursor;
        _ = anchor;
        try self.conn.sendMessage(&.{
            .{ .String = text },
            .{ .Uint = cursor },
            .{ .Uint = anchor },
        });
    }
    pub fn set_content_typeFn(
        self: *zwp_text_input_v1,
        hint: Uint,
        purpose: Uint,
    ) void {
        _ = self;
        _ = hint;
        _ = purpose;
        try self.conn.sendMessage(&.{
            .{ .Uint = hint },
            .{ .Uint = purpose },
        });
    }
    pub fn set_cursor_rectangleFn(
        self: *zwp_text_input_v1,
        x: Int,
        y: Int,
        width: Int,
        height: Int,
    ) void {
        _ = self;
        _ = x;
        _ = y;
        _ = width;
        _ = height;
        try self.conn.sendMessage(&.{
            .{ .Int = x },
            .{ .Int = y },
            .{ .Int = width },
            .{ .Int = height },
        });
    }
    pub fn set_preferred_languageFn(
        self: *zwp_text_input_v1,
        language: String,
    ) void {
        _ = self;
        _ = language;
        try self.conn.sendMessage(&.{
            .{ .String = language },
        });
    }
    pub fn commit_stateFn(
        self: *zwp_text_input_v1,
        serial: Uint,
    ) void {
        _ = self;
        _ = serial;
        try self.conn.sendMessage(&.{
            .{ .Uint = serial },
        });
    }
    pub fn invoke_actionFn(
        self: *zwp_text_input_v1,
        button: Uint,
        index: Uint,
    ) void {
        _ = self;
        _ = button;
        _ = index;
        try self.conn.sendMessage(&.{
            .{ .Uint = button },
            .{ .Uint = index },
        });
    }
};

pub const zwp_text_input_manager_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    pub fn get_callback(self: zwp_text_input_manager_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            else => null,
        };
    }
    pub fn create_text_inputFn(
        self: *zwp_text_input_manager_v1,
        enter: ?WLCallbackFn,
        leave: ?WLCallbackFn,
        modifiers_map: ?WLCallbackFn,
        input_panel_state: ?WLCallbackFn,
        preedit_string: ?WLCallbackFn,
        preedit_styling: ?WLCallbackFn,
        preedit_cursor: ?WLCallbackFn,
        commit_string: ?WLCallbackFn,
        cursor_position: ?WLCallbackFn,
        delete_surrounding_text: ?WLCallbackFn,
        keysym: ?WLCallbackFn,
        language: ?WLCallbackFn,
        text_direction: ?WLCallbackFn,
    ) *zwp_text_input_v1 {
        _ = self;
        _ = enter;
        _ = leave;
        _ = modifiers_map;
        _ = input_panel_state;
        _ = preedit_string;
        _ = preedit_styling;
        _ = preedit_cursor;
        _ = commit_string;
        _ = cursor_position;
        _ = delete_surrounding_text;
        _ = keysym;
        _ = language;
        _ = text_direction;
        try self.conn.sendMessage(&.{});
    }
};

pub const zwp_text_input_v3 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    enterFn: ?WLCallbackFn = null,
    leaveFn: ?WLCallbackFn = null,
    preedit_stringFn: ?WLCallbackFn = null,
    commit_stringFn: ?WLCallbackFn = null,
    delete_surrounding_textFn: ?WLCallbackFn = null,
    doneFn: ?WLCallbackFn = null,
    const enter_name = "enter";
    const enter_arg = &[_]Arg{
        .{ .name = "surface", .argType = .Object },
    };
    const leave_name = "leave";
    const leave_arg = &[_]Arg{
        .{ .name = "surface", .argType = .Object },
    };
    const preedit_string_name = "preedit_string";
    const preedit_string_arg = &[_]Arg{
        .{ .name = "text", .argType = .String },
        .{ .name = "cursor_begin", .argType = .Int },
        .{ .name = "cursor_end", .argType = .Int },
    };
    const commit_string_name = "commit_string";
    const commit_string_arg = &[_]Arg{
        .{ .name = "text", .argType = .String },
    };
    const delete_surrounding_text_name = "delete_surrounding_text";
    const delete_surrounding_text_arg = &[_]Arg{
        .{ .name = "before_length", .argType = .Uint },
        .{ .name = "after_length", .argType = .Uint },
    };
    const done_name = "done";
    const done_arg = &[_]Arg{
        .{ .name = "serial", .argType = .Uint },
    };
    pub fn get_callback(self: zwp_text_input_v3, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = enter_name, .args = enter_arg, .ctx = self.ctx, .func = self.enterFn },
            1 => .{ .name = leave_name, .args = leave_arg, .ctx = self.ctx, .func = self.leaveFn },
            2 => .{ .name = preedit_string_name, .args = preedit_string_arg, .ctx = self.ctx, .func = self.preedit_stringFn },
            3 => .{ .name = commit_string_name, .args = commit_string_arg, .ctx = self.ctx, .func = self.commit_stringFn },
            4 => .{ .name = delete_surrounding_text_name, .args = delete_surrounding_text_arg, .ctx = self.ctx, .func = self.delete_surrounding_textFn },
            5 => .{ .name = done_name, .args = done_arg, .ctx = self.ctx, .func = self.doneFn },
            else => null,
        };
    }
    pub fn destroyFn(
        self: *zwp_text_input_v3,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn enableFn(
        self: *zwp_text_input_v3,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn disableFn(
        self: *zwp_text_input_v3,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn set_surrounding_textFn(
        self: *zwp_text_input_v3,
        text: String,
        cursor: Int,
        anchor: Int,
    ) void {
        _ = self;
        _ = text;
        _ = cursor;
        _ = anchor;
        try self.conn.sendMessage(&.{
            .{ .String = text },
            .{ .Int = cursor },
            .{ .Int = anchor },
        });
    }
    pub fn set_text_change_causeFn(
        self: *zwp_text_input_v3,
        cause: Uint,
    ) void {
        _ = self;
        _ = cause;
        try self.conn.sendMessage(&.{
            .{ .Uint = cause },
        });
    }
    pub fn set_content_typeFn(
        self: *zwp_text_input_v3,
        hint: Uint,
        purpose: Uint,
    ) void {
        _ = self;
        _ = hint;
        _ = purpose;
        try self.conn.sendMessage(&.{
            .{ .Uint = hint },
            .{ .Uint = purpose },
        });
    }
    pub fn set_cursor_rectangleFn(
        self: *zwp_text_input_v3,
        x: Int,
        y: Int,
        width: Int,
        height: Int,
    ) void {
        _ = self;
        _ = x;
        _ = y;
        _ = width;
        _ = height;
        try self.conn.sendMessage(&.{
            .{ .Int = x },
            .{ .Int = y },
            .{ .Int = width },
            .{ .Int = height },
        });
    }
    pub fn commitFn(
        self: *zwp_text_input_v3,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
};

pub const zwp_text_input_manager_v3 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    pub fn get_callback(self: zwp_text_input_manager_v3, idx: u16) ?WLCallback {
        return switch (idx) {
            else => null,
        };
    }
    pub fn destroyFn(
        self: *zwp_text_input_manager_v3,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn get_text_inputFn(
        self: *zwp_text_input_manager_v3,
        enter: ?WLCallbackFn,
        leave: ?WLCallbackFn,
        preedit_string: ?WLCallbackFn,
        commit_string: ?WLCallbackFn,
        delete_surrounding_text: ?WLCallbackFn,
        done: ?WLCallbackFn,
        seat: Object,
    ) *zwp_text_input_v3 {
        _ = self;
        _ = enter;
        _ = leave;
        _ = preedit_string;
        _ = commit_string;
        _ = delete_surrounding_text;
        _ = done;
        _ = seat;
        try self.conn.sendMessage(&.{
            .{ .Object = seat },
        });
    }
};

pub const zxdg_decoration_manager_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    pub fn get_callback(self: zxdg_decoration_manager_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            else => null,
        };
    }
    pub fn destroyFn(
        self: *zxdg_decoration_manager_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn get_toplevel_decorationFn(
        self: *zxdg_decoration_manager_v1,
        configure: ?WLCallbackFn,
        toplevel: Object,
    ) *zxdg_toplevel_decoration_v1 {
        _ = self;
        _ = configure;
        _ = toplevel;
        try self.conn.sendMessage(&.{
            .{ .Object = toplevel },
        });
    }
};

pub const zxdg_toplevel_decoration_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    configureFn: ?WLCallbackFn = null,
    const configure_name = "configure";
    const configure_arg = &[_]Arg{
        .{ .name = "mode", .argType = .Uint },
    };
    pub fn get_callback(self: zxdg_toplevel_decoration_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = configure_name, .args = configure_arg, .ctx = self.ctx, .func = self.configureFn },
            else => null,
        };
    }
    pub fn destroyFn(
        self: *zxdg_toplevel_decoration_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn set_modeFn(
        self: *zxdg_toplevel_decoration_v1,
        mode: Uint,
    ) void {
        _ = self;
        _ = mode;
        try self.conn.sendMessage(&.{
            .{ .Uint = mode },
        });
    }
    pub fn unset_modeFn(
        self: *zxdg_toplevel_decoration_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
};

pub const zxdg_exporter_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    pub fn get_callback(self: zxdg_exporter_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            else => null,
        };
    }
    pub fn destroyFn(
        self: *zxdg_exporter_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn exportFn(
        self: *zxdg_exporter_v1,
        handle: ?WLCallbackFn,
        surface: Object,
    ) *zxdg_exported_v1 {
        _ = self;
        _ = handle;
        _ = surface;
        try self.conn.sendMessage(&.{
            .{ .Object = surface },
        });
    }
};

pub const zxdg_importer_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    pub fn get_callback(self: zxdg_importer_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            else => null,
        };
    }
    pub fn destroyFn(
        self: *zxdg_importer_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn importFn(
        self: *zxdg_importer_v1,
        destroyed: ?WLCallbackFn,
        handle: String,
    ) *zxdg_imported_v1 {
        _ = self;
        _ = destroyed;
        _ = handle;
        try self.conn.sendMessage(&.{
            .{ .String = handle },
        });
    }
};

pub const zxdg_exported_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    handleFn: ?WLCallbackFn = null,
    const handle_name = "handle";
    const handle_arg = &[_]Arg{
        .{ .name = "handle", .argType = .String },
    };
    pub fn get_callback(self: zxdg_exported_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = handle_name, .args = handle_arg, .ctx = self.ctx, .func = self.handleFn },
            else => null,
        };
    }
    pub fn destroyFn(
        self: *zxdg_exported_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
};

pub const zxdg_imported_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    destroyedFn: ?WLCallbackFn = null,
    const destroyed_name = "destroyed";
    const destroyed_arg = &[_]Arg{};
    pub fn get_callback(self: zxdg_imported_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = destroyed_name, .args = destroyed_arg, .ctx = self.ctx, .func = self.destroyedFn },
            else => null,
        };
    }
    pub fn destroyFn(
        self: *zxdg_imported_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn set_parent_ofFn(
        self: *zxdg_imported_v1,
        surface: Object,
    ) void {
        _ = self;
        _ = surface;
        try self.conn.sendMessage(&.{
            .{ .Object = surface },
        });
    }
};

pub const zxdg_exporter_v2 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    pub fn get_callback(self: zxdg_exporter_v2, idx: u16) ?WLCallback {
        return switch (idx) {
            else => null,
        };
    }
    pub fn destroyFn(
        self: *zxdg_exporter_v2,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn export_toplevelFn(
        self: *zxdg_exporter_v2,
        handle: ?WLCallbackFn,
        surface: Object,
    ) *zxdg_exported_v2 {
        _ = self;
        _ = handle;
        _ = surface;
        try self.conn.sendMessage(&.{
            .{ .Object = surface },
        });
    }
};

pub const zxdg_importer_v2 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    pub fn get_callback(self: zxdg_importer_v2, idx: u16) ?WLCallback {
        return switch (idx) {
            else => null,
        };
    }
    pub fn destroyFn(
        self: *zxdg_importer_v2,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn import_toplevelFn(
        self: *zxdg_importer_v2,
        destroyed: ?WLCallbackFn,
        handle: String,
    ) *zxdg_imported_v2 {
        _ = self;
        _ = destroyed;
        _ = handle;
        try self.conn.sendMessage(&.{
            .{ .String = handle },
        });
    }
};

pub const zxdg_exported_v2 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    handleFn: ?WLCallbackFn = null,
    const handle_name = "handle";
    const handle_arg = &[_]Arg{
        .{ .name = "handle", .argType = .String },
    };
    pub fn get_callback(self: zxdg_exported_v2, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = handle_name, .args = handle_arg, .ctx = self.ctx, .func = self.handleFn },
            else => null,
        };
    }
    pub fn destroyFn(
        self: *zxdg_exported_v2,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
};

pub const zxdg_imported_v2 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    destroyedFn: ?WLCallbackFn = null,
    const destroyed_name = "destroyed";
    const destroyed_arg = &[_]Arg{};
    pub fn get_callback(self: zxdg_imported_v2, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = destroyed_name, .args = destroyed_arg, .ctx = self.ctx, .func = self.destroyedFn },
            else => null,
        };
    }
    pub fn destroyFn(
        self: *zxdg_imported_v2,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn set_parent_ofFn(
        self: *zxdg_imported_v2,
        surface: Object,
    ) void {
        _ = self;
        _ = surface;
        try self.conn.sendMessage(&.{
            .{ .Object = surface },
        });
    }
};

pub const zxdg_output_manager_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    pub fn get_callback(self: zxdg_output_manager_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            else => null,
        };
    }
    pub fn destroyFn(
        self: *zxdg_output_manager_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn get_xdg_outputFn(
        self: *zxdg_output_manager_v1,
        logical_position: ?WLCallbackFn,
        logical_size: ?WLCallbackFn,
        done: ?WLCallbackFn,
        name: ?WLCallbackFn,
        description: ?WLCallbackFn,
        output: Object,
    ) *zxdg_output_v1 {
        _ = self;
        _ = logical_position;
        _ = logical_size;
        _ = done;
        _ = name;
        _ = description;
        _ = output;
        try self.conn.sendMessage(&.{
            .{ .Object = output },
        });
    }
};

pub const zxdg_output_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    logical_positionFn: ?WLCallbackFn = null,
    logical_sizeFn: ?WLCallbackFn = null,
    doneFn: ?WLCallbackFn = null,
    nameFn: ?WLCallbackFn = null,
    descriptionFn: ?WLCallbackFn = null,
    const logical_position_name = "logical_position";
    const logical_position_arg = &[_]Arg{
        .{ .name = "x", .argType = .Int },
        .{ .name = "y", .argType = .Int },
    };
    const logical_size_name = "logical_size";
    const logical_size_arg = &[_]Arg{
        .{ .name = "width", .argType = .Int },
        .{ .name = "height", .argType = .Int },
    };
    const done_name = "done";
    const done_arg = &[_]Arg{};
    const name_name = "name";
    const name_arg = &[_]Arg{
        .{ .name = "name", .argType = .String },
    };
    const description_name = "description";
    const description_arg = &[_]Arg{
        .{ .name = "description", .argType = .String },
    };
    pub fn get_callback(self: zxdg_output_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = logical_position_name, .args = logical_position_arg, .ctx = self.ctx, .func = self.logical_positionFn },
            1 => .{ .name = logical_size_name, .args = logical_size_arg, .ctx = self.ctx, .func = self.logical_sizeFn },
            2 => .{ .name = done_name, .args = done_arg, .ctx = self.ctx, .func = self.doneFn },
            3 => .{ .name = name_name, .args = name_arg, .ctx = self.ctx, .func = self.nameFn },
            4 => .{ .name = description_name, .args = description_arg, .ctx = self.ctx, .func = self.descriptionFn },
            else => null,
        };
    }
    pub fn destroyFn(
        self: *zxdg_output_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
};

pub const xdg_shell = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    pingFn: ?WLCallbackFn = null,
    const ping_name = "ping";
    const ping_arg = &[_]Arg{
        .{ .name = "serial", .argType = .Uint },
    };
    pub fn get_callback(self: xdg_shell, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = ping_name, .args = ping_arg, .ctx = self.ctx, .func = self.pingFn },
            else => null,
        };
    }
    pub fn destroyFn(
        self: *xdg_shell,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn use_unstable_versionFn(
        self: *xdg_shell,
        version: Int,
    ) void {
        _ = self;
        _ = version;
        try self.conn.sendMessage(&.{
            .{ .Int = version },
        });
    }
    pub fn get_xdg_surfaceFn(
        self: *xdg_shell,
        configure: ?WLCallbackFn,
        surface: Object,
    ) *xdg_surface {
        _ = self;
        _ = configure;
        _ = surface;
        try self.conn.sendMessage(&.{
            .{ .Object = surface },
        });
    }
    pub fn get_xdg_popupFn(
        self: *xdg_shell,
        configure: ?WLCallbackFn,
        popup_done: ?WLCallbackFn,
        repositioned: ?WLCallbackFn,
        surface: Object,
        parent: Object,
        seat: Object,
        serial: Uint,
        x: Int,
        y: Int,
    ) *xdg_popup {
        _ = self;
        _ = configure;
        _ = popup_done;
        _ = repositioned;
        _ = surface;
        _ = parent;
        _ = seat;
        _ = serial;
        _ = x;
        _ = y;
        try self.conn.sendMessage(&.{
            .{ .Object = surface },
            .{ .Object = parent },
            .{ .Object = seat },
            .{ .Uint = serial },
            .{ .Int = x },
            .{ .Int = y },
        });
    }
    pub fn pongFn(
        self: *xdg_shell,
        serial: Uint,
    ) void {
        _ = self;
        _ = serial;
        try self.conn.sendMessage(&.{
            .{ .Uint = serial },
        });
    }
};

pub const xdg_surface = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    configureFn: ?WLCallbackFn = null,
    closeFn: ?WLCallbackFn = null,
    const configure_name = "configure";
    const configure_arg = &[_]Arg{
        .{ .name = "width", .argType = .Int },
        .{ .name = "height", .argType = .Int },
        .{ .name = "states", .argType = .Array },
        .{ .name = "serial", .argType = .Uint },
    };
    const close_name = "close";
    const close_arg = &[_]Arg{};
    pub fn get_callback(self: xdg_surface, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = configure_name, .args = configure_arg, .ctx = self.ctx, .func = self.configureFn },
            1 => .{ .name = close_name, .args = close_arg, .ctx = self.ctx, .func = self.closeFn },
            else => null,
        };
    }
    pub fn destroyFn(
        self: *xdg_surface,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn set_parentFn(
        self: *xdg_surface,
        parent: Object,
    ) void {
        _ = self;
        _ = parent;
        try self.conn.sendMessage(&.{
            .{ .Object = parent },
        });
    }
    pub fn set_titleFn(
        self: *xdg_surface,
        title: String,
    ) void {
        _ = self;
        _ = title;
        try self.conn.sendMessage(&.{
            .{ .String = title },
        });
    }
    pub fn set_app_idFn(
        self: *xdg_surface,
        app_id: String,
    ) void {
        _ = self;
        _ = app_id;
        try self.conn.sendMessage(&.{
            .{ .String = app_id },
        });
    }
    pub fn show_window_menuFn(
        self: *xdg_surface,
        seat: Object,
        serial: Uint,
        x: Int,
        y: Int,
    ) void {
        _ = self;
        _ = seat;
        _ = serial;
        _ = x;
        _ = y;
        try self.conn.sendMessage(&.{
            .{ .Object = seat },
            .{ .Uint = serial },
            .{ .Int = x },
            .{ .Int = y },
        });
    }
    pub fn moveFn(
        self: *xdg_surface,
        seat: Object,
        serial: Uint,
    ) void {
        _ = self;
        _ = seat;
        _ = serial;
        try self.conn.sendMessage(&.{
            .{ .Object = seat },
            .{ .Uint = serial },
        });
    }
    pub fn resizeFn(
        self: *xdg_surface,
        seat: Object,
        serial: Uint,
        edges: Uint,
    ) void {
        _ = self;
        _ = seat;
        _ = serial;
        _ = edges;
        try self.conn.sendMessage(&.{
            .{ .Object = seat },
            .{ .Uint = serial },
            .{ .Uint = edges },
        });
    }
    pub fn ack_configureFn(
        self: *xdg_surface,
        serial: Uint,
    ) void {
        _ = self;
        _ = serial;
        try self.conn.sendMessage(&.{
            .{ .Uint = serial },
        });
    }
    pub fn set_window_geometryFn(
        self: *xdg_surface,
        x: Int,
        y: Int,
        width: Int,
        height: Int,
    ) void {
        _ = self;
        _ = x;
        _ = y;
        _ = width;
        _ = height;
        try self.conn.sendMessage(&.{
            .{ .Int = x },
            .{ .Int = y },
            .{ .Int = width },
            .{ .Int = height },
        });
    }
    pub fn set_maximizedFn(
        self: *xdg_surface,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn unset_maximizedFn(
        self: *xdg_surface,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn set_fullscreenFn(
        self: *xdg_surface,
        output: Object,
    ) void {
        _ = self;
        _ = output;
        try self.conn.sendMessage(&.{
            .{ .Object = output },
        });
    }
    pub fn unset_fullscreenFn(
        self: *xdg_surface,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn set_minimizedFn(
        self: *xdg_surface,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
};

pub const xdg_popup = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    popup_doneFn: ?WLCallbackFn = null,
    const popup_done_name = "popup_done";
    const popup_done_arg = &[_]Arg{};
    pub fn get_callback(self: xdg_popup, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = popup_done_name, .args = popup_done_arg, .ctx = self.ctx, .func = self.popup_doneFn },
            else => null,
        };
    }
    pub fn destroyFn(
        self: *xdg_popup,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
};

pub const zxdg_shell_v6 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    pingFn: ?WLCallbackFn = null,
    const ping_name = "ping";
    const ping_arg = &[_]Arg{
        .{ .name = "serial", .argType = .Uint },
    };
    pub fn get_callback(self: zxdg_shell_v6, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = ping_name, .args = ping_arg, .ctx = self.ctx, .func = self.pingFn },
            else => null,
        };
    }
    pub fn destroyFn(
        self: *zxdg_shell_v6,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn create_positionerFn(
        self: *zxdg_shell_v6,
    ) *zxdg_positioner_v6 {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn get_xdg_surfaceFn(
        self: *zxdg_shell_v6,
        configure: ?WLCallbackFn,
        surface: Object,
    ) *zxdg_surface_v6 {
        _ = self;
        _ = configure;
        _ = surface;
        try self.conn.sendMessage(&.{
            .{ .Object = surface },
        });
    }
    pub fn pongFn(
        self: *zxdg_shell_v6,
        serial: Uint,
    ) void {
        _ = self;
        _ = serial;
        try self.conn.sendMessage(&.{
            .{ .Uint = serial },
        });
    }
};

pub const zxdg_positioner_v6 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    pub fn get_callback(self: zxdg_positioner_v6, idx: u16) ?WLCallback {
        return switch (idx) {
            else => null,
        };
    }
    pub fn destroyFn(
        self: *zxdg_positioner_v6,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn set_sizeFn(
        self: *zxdg_positioner_v6,
        width: Int,
        height: Int,
    ) void {
        _ = self;
        _ = width;
        _ = height;
        try self.conn.sendMessage(&.{
            .{ .Int = width },
            .{ .Int = height },
        });
    }
    pub fn set_anchor_rectFn(
        self: *zxdg_positioner_v6,
        x: Int,
        y: Int,
        width: Int,
        height: Int,
    ) void {
        _ = self;
        _ = x;
        _ = y;
        _ = width;
        _ = height;
        try self.conn.sendMessage(&.{
            .{ .Int = x },
            .{ .Int = y },
            .{ .Int = width },
            .{ .Int = height },
        });
    }
    pub fn set_anchorFn(
        self: *zxdg_positioner_v6,
        anchor: Uint,
    ) void {
        _ = self;
        _ = anchor;
        try self.conn.sendMessage(&.{
            .{ .Uint = anchor },
        });
    }
    pub fn set_gravityFn(
        self: *zxdg_positioner_v6,
        gravity: Uint,
    ) void {
        _ = self;
        _ = gravity;
        try self.conn.sendMessage(&.{
            .{ .Uint = gravity },
        });
    }
    pub fn set_constraint_adjustmentFn(
        self: *zxdg_positioner_v6,
        constraint_adjustment: Uint,
    ) void {
        _ = self;
        _ = constraint_adjustment;
        try self.conn.sendMessage(&.{
            .{ .Uint = constraint_adjustment },
        });
    }
    pub fn set_offsetFn(
        self: *zxdg_positioner_v6,
        x: Int,
        y: Int,
    ) void {
        _ = self;
        _ = x;
        _ = y;
        try self.conn.sendMessage(&.{
            .{ .Int = x },
            .{ .Int = y },
        });
    }
};

pub const zxdg_surface_v6 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    configureFn: ?WLCallbackFn = null,
    const configure_name = "configure";
    const configure_arg = &[_]Arg{
        .{ .name = "serial", .argType = .Uint },
    };
    pub fn get_callback(self: zxdg_surface_v6, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = configure_name, .args = configure_arg, .ctx = self.ctx, .func = self.configureFn },
            else => null,
        };
    }
    pub fn destroyFn(
        self: *zxdg_surface_v6,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn get_toplevelFn(
        self: *zxdg_surface_v6,
        configure: ?WLCallbackFn,
        close: ?WLCallbackFn,
    ) *zxdg_toplevel_v6 {
        _ = self;
        _ = configure;
        _ = close;
        try self.conn.sendMessage(&.{});
    }
    pub fn get_popupFn(
        self: *zxdg_surface_v6,
        configure: ?WLCallbackFn,
        popup_done: ?WLCallbackFn,
        parent: Object,
        positioner: Object,
    ) *zxdg_popup_v6 {
        _ = self;
        _ = configure;
        _ = popup_done;
        _ = parent;
        _ = positioner;
        try self.conn.sendMessage(&.{
            .{ .Object = parent },
            .{ .Object = positioner },
        });
    }
    pub fn set_window_geometryFn(
        self: *zxdg_surface_v6,
        x: Int,
        y: Int,
        width: Int,
        height: Int,
    ) void {
        _ = self;
        _ = x;
        _ = y;
        _ = width;
        _ = height;
        try self.conn.sendMessage(&.{
            .{ .Int = x },
            .{ .Int = y },
            .{ .Int = width },
            .{ .Int = height },
        });
    }
    pub fn ack_configureFn(
        self: *zxdg_surface_v6,
        serial: Uint,
    ) void {
        _ = self;
        _ = serial;
        try self.conn.sendMessage(&.{
            .{ .Uint = serial },
        });
    }
};

pub const zxdg_toplevel_v6 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    configureFn: ?WLCallbackFn = null,
    closeFn: ?WLCallbackFn = null,
    const configure_name = "configure";
    const configure_arg = &[_]Arg{
        .{ .name = "width", .argType = .Int },
        .{ .name = "height", .argType = .Int },
        .{ .name = "states", .argType = .Array },
    };
    const close_name = "close";
    const close_arg = &[_]Arg{};
    pub fn get_callback(self: zxdg_toplevel_v6, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = configure_name, .args = configure_arg, .ctx = self.ctx, .func = self.configureFn },
            1 => .{ .name = close_name, .args = close_arg, .ctx = self.ctx, .func = self.closeFn },
            else => null,
        };
    }
    pub fn destroyFn(
        self: *zxdg_toplevel_v6,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn set_parentFn(
        self: *zxdg_toplevel_v6,
        parent: Object,
    ) void {
        _ = self;
        _ = parent;
        try self.conn.sendMessage(&.{
            .{ .Object = parent },
        });
    }
    pub fn set_titleFn(
        self: *zxdg_toplevel_v6,
        title: String,
    ) void {
        _ = self;
        _ = title;
        try self.conn.sendMessage(&.{
            .{ .String = title },
        });
    }
    pub fn set_app_idFn(
        self: *zxdg_toplevel_v6,
        app_id: String,
    ) void {
        _ = self;
        _ = app_id;
        try self.conn.sendMessage(&.{
            .{ .String = app_id },
        });
    }
    pub fn show_window_menuFn(
        self: *zxdg_toplevel_v6,
        seat: Object,
        serial: Uint,
        x: Int,
        y: Int,
    ) void {
        _ = self;
        _ = seat;
        _ = serial;
        _ = x;
        _ = y;
        try self.conn.sendMessage(&.{
            .{ .Object = seat },
            .{ .Uint = serial },
            .{ .Int = x },
            .{ .Int = y },
        });
    }
    pub fn moveFn(
        self: *zxdg_toplevel_v6,
        seat: Object,
        serial: Uint,
    ) void {
        _ = self;
        _ = seat;
        _ = serial;
        try self.conn.sendMessage(&.{
            .{ .Object = seat },
            .{ .Uint = serial },
        });
    }
    pub fn resizeFn(
        self: *zxdg_toplevel_v6,
        seat: Object,
        serial: Uint,
        edges: Uint,
    ) void {
        _ = self;
        _ = seat;
        _ = serial;
        _ = edges;
        try self.conn.sendMessage(&.{
            .{ .Object = seat },
            .{ .Uint = serial },
            .{ .Uint = edges },
        });
    }
    pub fn set_max_sizeFn(
        self: *zxdg_toplevel_v6,
        width: Int,
        height: Int,
    ) void {
        _ = self;
        _ = width;
        _ = height;
        try self.conn.sendMessage(&.{
            .{ .Int = width },
            .{ .Int = height },
        });
    }
    pub fn set_min_sizeFn(
        self: *zxdg_toplevel_v6,
        width: Int,
        height: Int,
    ) void {
        _ = self;
        _ = width;
        _ = height;
        try self.conn.sendMessage(&.{
            .{ .Int = width },
            .{ .Int = height },
        });
    }
    pub fn set_maximizedFn(
        self: *zxdg_toplevel_v6,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn unset_maximizedFn(
        self: *zxdg_toplevel_v6,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn set_fullscreenFn(
        self: *zxdg_toplevel_v6,
        output: Object,
    ) void {
        _ = self;
        _ = output;
        try self.conn.sendMessage(&.{
            .{ .Object = output },
        });
    }
    pub fn unset_fullscreenFn(
        self: *zxdg_toplevel_v6,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn set_minimizedFn(
        self: *zxdg_toplevel_v6,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
};

pub const zxdg_popup_v6 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    configureFn: ?WLCallbackFn = null,
    popup_doneFn: ?WLCallbackFn = null,
    const configure_name = "configure";
    const configure_arg = &[_]Arg{
        .{ .name = "x", .argType = .Int },
        .{ .name = "y", .argType = .Int },
        .{ .name = "width", .argType = .Int },
        .{ .name = "height", .argType = .Int },
    };
    const popup_done_name = "popup_done";
    const popup_done_arg = &[_]Arg{};
    pub fn get_callback(self: zxdg_popup_v6, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = configure_name, .args = configure_arg, .ctx = self.ctx, .func = self.configureFn },
            1 => .{ .name = popup_done_name, .args = popup_done_arg, .ctx = self.ctx, .func = self.popup_doneFn },
            else => null,
        };
    }
    pub fn destroyFn(
        self: *zxdg_popup_v6,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn grabFn(
        self: *zxdg_popup_v6,
        seat: Object,
        serial: Uint,
    ) void {
        _ = self;
        _ = seat;
        _ = serial;
        try self.conn.sendMessage(&.{
            .{ .Object = seat },
            .{ .Uint = serial },
        });
    }
};

pub const zwp_xwayland_keyboard_grab_manager_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    pub fn get_callback(self: zwp_xwayland_keyboard_grab_manager_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            else => null,
        };
    }
    pub fn destroyFn(
        self: *zwp_xwayland_keyboard_grab_manager_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn grab_keyboardFn(
        self: *zwp_xwayland_keyboard_grab_manager_v1,
        surface: Object,
        seat: Object,
    ) *zwp_xwayland_keyboard_grab_v1 {
        _ = self;
        _ = surface;
        _ = seat;
        try self.conn.sendMessage(&.{
            .{ .Object = surface },
            .{ .Object = seat },
        });
    }
};

pub const zwp_xwayland_keyboard_grab_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    pub fn get_callback(self: zwp_xwayland_keyboard_grab_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            else => null,
        };
    }
    pub fn destroyFn(
        self: *zwp_xwayland_keyboard_grab_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
};

pub const wp_drm_lease_device_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    drm_fdFn: ?WLCallbackFn = null,
    connectorFn: ?WLCallbackFn = null,
    doneFn: ?WLCallbackFn = null,
    releasedFn: ?WLCallbackFn = null,
    const drm_fd_name = "drm_fd";
    const drm_fd_arg = &[_]Arg{
        .{ .name = "fd", .argType = .Fd },
    };
    const connector_name = "connector";
    const connector_arg = &[_]Arg{
        .{ .name = "id", .argType = .NewId },
    };
    const done_name = "done";
    const done_arg = &[_]Arg{};
    const released_name = "released";
    const released_arg = &[_]Arg{};
    pub fn get_callback(self: wp_drm_lease_device_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = drm_fd_name, .args = drm_fd_arg, .ctx = self.ctx, .func = self.drm_fdFn },
            1 => .{ .name = connector_name, .args = connector_arg, .ctx = self.ctx, .func = self.connectorFn },
            2 => .{ .name = done_name, .args = done_arg, .ctx = self.ctx, .func = self.doneFn },
            3 => .{ .name = released_name, .args = released_arg, .ctx = self.ctx, .func = self.releasedFn },
            else => null,
        };
    }
    pub fn create_lease_requestFn(
        self: *wp_drm_lease_device_v1,
    ) *wp_drm_lease_request_v1 {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn releaseFn(
        self: *wp_drm_lease_device_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
};

pub const wp_drm_lease_connector_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    nameFn: ?WLCallbackFn = null,
    descriptionFn: ?WLCallbackFn = null,
    connector_idFn: ?WLCallbackFn = null,
    doneFn: ?WLCallbackFn = null,
    withdrawnFn: ?WLCallbackFn = null,
    const name_name = "name";
    const name_arg = &[_]Arg{
        .{ .name = "name", .argType = .String },
    };
    const description_name = "description";
    const description_arg = &[_]Arg{
        .{ .name = "description", .argType = .String },
    };
    const connector_id_name = "connector_id";
    const connector_id_arg = &[_]Arg{
        .{ .name = "connector_id", .argType = .Uint },
    };
    const done_name = "done";
    const done_arg = &[_]Arg{};
    const withdrawn_name = "withdrawn";
    const withdrawn_arg = &[_]Arg{};
    pub fn get_callback(self: wp_drm_lease_connector_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = name_name, .args = name_arg, .ctx = self.ctx, .func = self.nameFn },
            1 => .{ .name = description_name, .args = description_arg, .ctx = self.ctx, .func = self.descriptionFn },
            2 => .{ .name = connector_id_name, .args = connector_id_arg, .ctx = self.ctx, .func = self.connector_idFn },
            3 => .{ .name = done_name, .args = done_arg, .ctx = self.ctx, .func = self.doneFn },
            4 => .{ .name = withdrawn_name, .args = withdrawn_arg, .ctx = self.ctx, .func = self.withdrawnFn },
            else => null,
        };
    }
    pub fn destroyFn(
        self: *wp_drm_lease_connector_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
};

pub const wp_drm_lease_request_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    pub fn get_callback(self: wp_drm_lease_request_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            else => null,
        };
    }
    pub fn request_connectorFn(
        self: *wp_drm_lease_request_v1,
        connector: Object,
    ) void {
        _ = self;
        _ = connector;
        try self.conn.sendMessage(&.{
            .{ .Object = connector },
        });
    }
    pub fn submitFn(
        self: *wp_drm_lease_request_v1,
        lease_fd: ?WLCallbackFn,
        finished: ?WLCallbackFn,
    ) *wp_drm_lease_v1 {
        _ = self;
        _ = lease_fd;
        _ = finished;
        try self.conn.sendMessage(&.{});
    }
};

pub const wp_drm_lease_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    lease_fdFn: ?WLCallbackFn = null,
    finishedFn: ?WLCallbackFn = null,
    const lease_fd_name = "lease_fd";
    const lease_fd_arg = &[_]Arg{
        .{ .name = "leased_fd", .argType = .Fd },
    };
    const finished_name = "finished";
    const finished_arg = &[_]Arg{};
    pub fn get_callback(self: wp_drm_lease_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = lease_fd_name, .args = lease_fd_arg, .ctx = self.ctx, .func = self.lease_fdFn },
            1 => .{ .name = finished_name, .args = finished_arg, .ctx = self.ctx, .func = self.finishedFn },
            else => null,
        };
    }
    pub fn destroyFn(
        self: *wp_drm_lease_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
};

pub const xdg_activation_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    pub fn get_callback(self: xdg_activation_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            else => null,
        };
    }
    pub fn destroyFn(
        self: *xdg_activation_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn get_activation_tokenFn(
        self: *xdg_activation_v1,
        done: ?WLCallbackFn,
    ) *xdg_activation_token_v1 {
        _ = self;
        _ = done;
        try self.conn.sendMessage(&.{});
    }
    pub fn activateFn(
        self: *xdg_activation_v1,
        token: String,
        surface: Object,
    ) void {
        _ = self;
        _ = token;
        _ = surface;
        try self.conn.sendMessage(&.{
            .{ .String = token },
            .{ .Object = surface },
        });
    }
};

pub const xdg_activation_token_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    doneFn: ?WLCallbackFn = null,
    const done_name = "done";
    const done_arg = &[_]Arg{
        .{ .name = "token", .argType = .String },
    };
    pub fn get_callback(self: xdg_activation_token_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = done_name, .args = done_arg, .ctx = self.ctx, .func = self.doneFn },
            else => null,
        };
    }
    pub fn set_serialFn(
        self: *xdg_activation_token_v1,
        serial: Uint,
        seat: Object,
    ) void {
        _ = self;
        _ = serial;
        _ = seat;
        try self.conn.sendMessage(&.{
            .{ .Uint = serial },
            .{ .Object = seat },
        });
    }
    pub fn set_app_idFn(
        self: *xdg_activation_token_v1,
        app_id: String,
    ) void {
        _ = self;
        _ = app_id;
        try self.conn.sendMessage(&.{
            .{ .String = app_id },
        });
    }
    pub fn set_surfaceFn(
        self: *xdg_activation_token_v1,
        surface: Object,
    ) void {
        _ = self;
        _ = surface;
        try self.conn.sendMessage(&.{
            .{ .Object = surface },
        });
    }
    pub fn commitFn(
        self: *xdg_activation_token_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn destroyFn(
        self: *xdg_activation_token_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
};

pub const ext_session_lock_manager_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    pub fn get_callback(self: ext_session_lock_manager_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            else => null,
        };
    }
    pub fn destroyFn(
        self: *ext_session_lock_manager_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn lockFn(
        self: *ext_session_lock_manager_v1,
        locked: ?WLCallbackFn,
        finished: ?WLCallbackFn,
    ) *ext_session_lock_v1 {
        _ = self;
        _ = locked;
        _ = finished;
        try self.conn.sendMessage(&.{});
    }
};

pub const ext_session_lock_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    lockedFn: ?WLCallbackFn = null,
    finishedFn: ?WLCallbackFn = null,
    const locked_name = "locked";
    const locked_arg = &[_]Arg{};
    const finished_name = "finished";
    const finished_arg = &[_]Arg{};
    pub fn get_callback(self: ext_session_lock_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = locked_name, .args = locked_arg, .ctx = self.ctx, .func = self.lockedFn },
            1 => .{ .name = finished_name, .args = finished_arg, .ctx = self.ctx, .func = self.finishedFn },
            else => null,
        };
    }
    pub fn destroyFn(
        self: *ext_session_lock_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn get_lock_surfaceFn(
        self: *ext_session_lock_v1,
        configure: ?WLCallbackFn,
        surface: Object,
        output: Object,
    ) *ext_session_lock_surface_v1 {
        _ = self;
        _ = configure;
        _ = surface;
        _ = output;
        try self.conn.sendMessage(&.{
            .{ .Object = surface },
            .{ .Object = output },
        });
    }
    pub fn unlock_and_destroyFn(
        self: *ext_session_lock_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
};

pub const ext_session_lock_surface_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    configureFn: ?WLCallbackFn = null,
    const configure_name = "configure";
    const configure_arg = &[_]Arg{
        .{ .name = "serial", .argType = .Uint },
        .{ .name = "width", .argType = .Uint },
        .{ .name = "height", .argType = .Uint },
    };
    pub fn get_callback(self: ext_session_lock_surface_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            0 => .{ .name = configure_name, .args = configure_arg, .ctx = self.ctx, .func = self.configureFn },
            else => null,
        };
    }
    pub fn destroyFn(
        self: *ext_session_lock_surface_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn ack_configureFn(
        self: *ext_session_lock_surface_v1,
        serial: Uint,
    ) void {
        _ = self;
        _ = serial;
        try self.conn.sendMessage(&.{
            .{ .Uint = serial },
        });
    }
};

pub const wp_single_pixel_buffer_manager_v1 = struct {
    ctx: ?*anyopaque,
    conn: *WLConnection,
    pub fn get_callback(self: wp_single_pixel_buffer_manager_v1, idx: u16) ?WLCallback {
        return switch (idx) {
            else => null,
        };
    }
    pub fn destroyFn(
        self: *wp_single_pixel_buffer_manager_v1,
    ) void {
        _ = self;
        try self.conn.sendMessage(&.{});
    }
    pub fn create_u32_rgba_bufferFn(
        self: *wp_single_pixel_buffer_manager_v1,
        release: ?WLCallbackFn,
        r: Uint,
        g: Uint,
        b: Uint,
        a: Uint,
    ) *wl_buffer {
        _ = self;
        _ = release;
        _ = r;
        _ = g;
        _ = b;
        _ = a;
        try self.conn.sendMessage(&.{
            .{ .Uint = r },
            .{ .Uint = g },
            .{ .Uint = b },
            .{ .Uint = a },
        });
    }
};
